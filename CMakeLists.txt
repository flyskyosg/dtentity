CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0 FATAL_ERROR)
 
PROJECT(dtEntity)

IF (WIN32)
  SET(CMAKE_DEBUG_POSTFIX  "d")
ENDIF (WIN32)

IF(CMAKE_SIZEOF_VOID_P MATCHES "8")
    SET(SYSTEM_ARCHITECTURE "64bits")
    IF(UNIX AND NOT WIN32 AND NOT APPLE AND NOT DEFINED LIB_POSTFIX)
        SET(LIB_POSTFIX "64")
    ENDIF(UNIX AND NOT WIN32 AND NOT APPLE AND NOT DEFINED LIB_POSTFIX)
ELSE(CMAKE_SIZEOF_VOID_P MATCHES "8")
    IF(NOT DEFINED SYSTEM_ARCHITECTURE)
      SET(SYSTEM_ARCHITECTURE "32bits")
    ENDIF(NOT DEFINED SYSTEM_ARCHITECTURE)

    IF(NOT DEFINED LIB_POSTFIX)
       SET(LIB_POSTFIX "")
    ENDIF(NOT DEFINED LIB_POSTFIX)
ENDIF(CMAKE_SIZEOF_VOID_P MATCHES "8")
MARK_AS_ADVANCED(LIB_POSTFIX)


SET(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMakeModules;${CMAKE_SOURCE_DIR}/source/osgLibRocket/cmake;${CMAKE_MODULE_PATH}")

SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/bin)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)

INCLUDE(DTEntityMacroUtils)

# Dynamic vs Static Linking
OPTION(DYNAMIC_DTENTITY "Set to ON to build dtEntity for dynamic linking.  Use OFF for static." ON)
IF(DYNAMIC_DTENTITY)
    SET(DTENTITY_USER_DEFINED_DYNAMIC_OR_STATIC "MODULE")
ELSE ()
    SET(DTENTITY_USER_DEFINED_DYNAMIC_OR_STATIC "STATIC")
    ADD_DEFINITIONS(-DDTENTITY_STATIC_BUILD)
    SET(BUILD_OSGLIBROCKET_STATIC "TRUE")
ENDIF()

#select OSG libraries to link against
SET(USE_OSG_ANIMATION   1)
SET(USE_OSG_DB          1)
SET(USE_OSG_GA          1)
SET(USE_OSG_PARTICLE    1)
SET(USE_OSG_SHADOW      1)
SET(USE_OSG_SIM         1)
SET(USE_OSG_TEXT        1)
SET(USE_OSG_TERRAIN     0)
SET(USE_OSG_UTIL        1)
SET(USE_OSG_VIEWER      1)
SET(USE_OSG_MANIPULATOR 1)
FIND_PACKAGE(OpenSceneGraph REQUIRED)

# link against delta3d libs?
OPTION(BUILD_WITH_DELTA3D "Build with Delta3D" OFF)
IF (BUILD_WITH_DELTA3D)
  FIND_PACKAGE(Delta3D REQUIRED)
  LINK_DIRECTORIES( ${DELTA3D_LIB_DIR} )
  IF (DELTA3D_EXT_DIR)
    LINK_DIRECTORIES( ${DELTA3D_EXT_DIR}/lib )
  ENDIF (DELTA3D_EXT_DIR)
ENDIF (BUILD_WITH_DELTA3D)

# all plugins link against these libraries
SET(TARGET_COMMON_LIBRARIES
    ${OPENTHREADS_LIBRARIES}
    ${OSG_LIBRARIES}
    dtEntity
)

INCLUDE_DIRECTORIES(include ${OSG_INCLUDE_DIRS})

#to allow usage of hash_map without warnings:
IF(CMAKE_COMPILER_IS_GNUCXX)
  ADD_DEFINITIONS(${CMAKE_CXX_FLAGS} "-Wno-deprecated")
ENDIF(CMAKE_COMPILER_IS_GNUCXX)

if(APPLE) 
    if(NOT DTENTITY_CONFIG_HAS_BEEN_RUN_BEFORE)
        if ("${CMAKE_OSX_SYSROOT}" MATCHES ".*/Developer/SDKs/MacOSX10.7.sdk") 
            MESSAGE(STATUS "MacOSX10.7.sdk")
            SET(CMAKE_OSX_ARCHITECTURES "x86_64" CACHE STRING "Build architectures for OSX" FORCE)
            SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmacosx-version-min=10.7 -fvisibility-inlines-hidden" CACHE STRING "Flags used by the compiler during all build types." FORCE)
        endif()    
     endif()
endif()

OPTION(BUILD_TESTS "Build unit tests" OFF)

ADD_SUBDIRECTORY(ext)


ADD_SUBDIRECTORY(source)

OPTION(BUILD_EXAMPLES "Build examples" OFF)
IF(BUILD_EXAMPLES)
  ADD_SUBDIRECTORY(examples)
ENDIF(BUILD_EXAMPLES)

