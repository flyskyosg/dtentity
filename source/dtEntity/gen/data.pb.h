// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef PROTOBUF_data_2eproto__INCLUDED
#define PROTOBUF_data_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace dtProtoBuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2eproto();
void protobuf_AssignDesc_data_2eproto();
void protobuf_ShutdownFile_data_2eproto();

class Vec2;
class Vec3;
class Vec4;
class Vec2d;
class Vec3d;
class Vec4d;
class Quat;
class Matrix;
class Property;
class Message;
class Component;
class EntitySystem;
class Entity;
class Spawner;
class Map;
class Scene;

enum PropertyType {
  NONE = 0,
  ARRAY = 1,
  BOOL = 2,
  CHAR = 3,
  DOUBLE = 4,
  FLOAT = 5,
  GROUP = 6,
  INT = 7,
  MATRIX = 8,
  QUAT = 9,
  STRING = 10,
  STRINGID = 11,
  UINT = 12,
  VEC2 = 13,
  VEC3 = 14,
  VEC4 = 15,
  VEC2D = 16,
  VEC3D = 17,
  VEC4D = 18
};
bool PropertyType_IsValid(int value);
const PropertyType PropertyType_MIN = NONE;
const PropertyType PropertyType_MAX = VEC4D;
const int PropertyType_ARRAYSIZE = PropertyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PropertyType_descriptor();
inline const ::std::string& PropertyType_Name(PropertyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PropertyType_descriptor(), value);
}
inline bool PropertyType_Parse(
    const ::std::string& name, PropertyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PropertyType>(
    PropertyType_descriptor(), name, value);
}
// ===================================================================

class Vec2 : public ::google::protobuf::Message {
 public:
  Vec2();
  virtual ~Vec2();
  
  Vec2(const Vec2& from);
  
  inline Vec2& operator=(const Vec2& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec2& default_instance();
  
  void Swap(Vec2* other);
  
  // implements Message ----------------------------------------------
  
  Vec2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec2& from);
  void MergeFrom(const Vec2& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float value_0 = 1;
  inline bool has_value_0() const;
  inline void clear_value_0();
  static const int kValue0FieldNumber = 1;
  inline float value_0() const;
  inline void set_value_0(float value);
  
  // required float value_1 = 2;
  inline bool has_value_1() const;
  inline void clear_value_1();
  static const int kValue1FieldNumber = 2;
  inline float value_1() const;
  inline void set_value_1(float value);
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Vec2)
 private:
  inline void set_has_value_0();
  inline void clear_has_value_0();
  inline void set_has_value_1();
  inline void clear_has_value_1();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float value_0_;
  float value_1_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Vec2* default_instance_;
};
// -------------------------------------------------------------------

class Vec3 : public ::google::protobuf::Message {
 public:
  Vec3();
  virtual ~Vec3();
  
  Vec3(const Vec3& from);
  
  inline Vec3& operator=(const Vec3& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3& default_instance();
  
  void Swap(Vec3* other);
  
  // implements Message ----------------------------------------------
  
  Vec3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec3& from);
  void MergeFrom(const Vec3& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float value_0 = 1;
  inline bool has_value_0() const;
  inline void clear_value_0();
  static const int kValue0FieldNumber = 1;
  inline float value_0() const;
  inline void set_value_0(float value);
  
  // required float value_1 = 2;
  inline bool has_value_1() const;
  inline void clear_value_1();
  static const int kValue1FieldNumber = 2;
  inline float value_1() const;
  inline void set_value_1(float value);
  
  // required float value_2 = 3;
  inline bool has_value_2() const;
  inline void clear_value_2();
  static const int kValue2FieldNumber = 3;
  inline float value_2() const;
  inline void set_value_2(float value);
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Vec3)
 private:
  inline void set_has_value_0();
  inline void clear_has_value_0();
  inline void set_has_value_1();
  inline void clear_has_value_1();
  inline void set_has_value_2();
  inline void clear_has_value_2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float value_0_;
  float value_1_;
  float value_2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Vec3* default_instance_;
};
// -------------------------------------------------------------------

class Vec4 : public ::google::protobuf::Message {
 public:
  Vec4();
  virtual ~Vec4();
  
  Vec4(const Vec4& from);
  
  inline Vec4& operator=(const Vec4& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec4& default_instance();
  
  void Swap(Vec4* other);
  
  // implements Message ----------------------------------------------
  
  Vec4* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec4& from);
  void MergeFrom(const Vec4& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float value_0 = 1;
  inline bool has_value_0() const;
  inline void clear_value_0();
  static const int kValue0FieldNumber = 1;
  inline float value_0() const;
  inline void set_value_0(float value);
  
  // required float value_1 = 2;
  inline bool has_value_1() const;
  inline void clear_value_1();
  static const int kValue1FieldNumber = 2;
  inline float value_1() const;
  inline void set_value_1(float value);
  
  // required float value_2 = 3;
  inline bool has_value_2() const;
  inline void clear_value_2();
  static const int kValue2FieldNumber = 3;
  inline float value_2() const;
  inline void set_value_2(float value);
  
  // required float value_3 = 4;
  inline bool has_value_3() const;
  inline void clear_value_3();
  static const int kValue3FieldNumber = 4;
  inline float value_3() const;
  inline void set_value_3(float value);
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Vec4)
 private:
  inline void set_has_value_0();
  inline void clear_has_value_0();
  inline void set_has_value_1();
  inline void clear_has_value_1();
  inline void set_has_value_2();
  inline void clear_has_value_2();
  inline void set_has_value_3();
  inline void clear_has_value_3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float value_0_;
  float value_1_;
  float value_2_;
  float value_3_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Vec4* default_instance_;
};
// -------------------------------------------------------------------

class Vec2d : public ::google::protobuf::Message {
 public:
  Vec2d();
  virtual ~Vec2d();
  
  Vec2d(const Vec2d& from);
  
  inline Vec2d& operator=(const Vec2d& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec2d& default_instance();
  
  void Swap(Vec2d* other);
  
  // implements Message ----------------------------------------------
  
  Vec2d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec2d& from);
  void MergeFrom(const Vec2d& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double value_0 = 1;
  inline bool has_value_0() const;
  inline void clear_value_0();
  static const int kValue0FieldNumber = 1;
  inline double value_0() const;
  inline void set_value_0(double value);
  
  // required double value_1 = 2;
  inline bool has_value_1() const;
  inline void clear_value_1();
  static const int kValue1FieldNumber = 2;
  inline double value_1() const;
  inline void set_value_1(double value);
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Vec2d)
 private:
  inline void set_has_value_0();
  inline void clear_has_value_0();
  inline void set_has_value_1();
  inline void clear_has_value_1();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double value_0_;
  double value_1_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Vec2d* default_instance_;
};
// -------------------------------------------------------------------

class Vec3d : public ::google::protobuf::Message {
 public:
  Vec3d();
  virtual ~Vec3d();
  
  Vec3d(const Vec3d& from);
  
  inline Vec3d& operator=(const Vec3d& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3d& default_instance();
  
  void Swap(Vec3d* other);
  
  // implements Message ----------------------------------------------
  
  Vec3d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec3d& from);
  void MergeFrom(const Vec3d& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double value_0 = 1;
  inline bool has_value_0() const;
  inline void clear_value_0();
  static const int kValue0FieldNumber = 1;
  inline double value_0() const;
  inline void set_value_0(double value);
  
  // required double value_1 = 2;
  inline bool has_value_1() const;
  inline void clear_value_1();
  static const int kValue1FieldNumber = 2;
  inline double value_1() const;
  inline void set_value_1(double value);
  
  // required double value_2 = 3;
  inline bool has_value_2() const;
  inline void clear_value_2();
  static const int kValue2FieldNumber = 3;
  inline double value_2() const;
  inline void set_value_2(double value);
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Vec3d)
 private:
  inline void set_has_value_0();
  inline void clear_has_value_0();
  inline void set_has_value_1();
  inline void clear_has_value_1();
  inline void set_has_value_2();
  inline void clear_has_value_2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double value_0_;
  double value_1_;
  double value_2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Vec3d* default_instance_;
};
// -------------------------------------------------------------------

class Vec4d : public ::google::protobuf::Message {
 public:
  Vec4d();
  virtual ~Vec4d();
  
  Vec4d(const Vec4d& from);
  
  inline Vec4d& operator=(const Vec4d& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec4d& default_instance();
  
  void Swap(Vec4d* other);
  
  // implements Message ----------------------------------------------
  
  Vec4d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vec4d& from);
  void MergeFrom(const Vec4d& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double value_0 = 1;
  inline bool has_value_0() const;
  inline void clear_value_0();
  static const int kValue0FieldNumber = 1;
  inline double value_0() const;
  inline void set_value_0(double value);
  
  // required double value_1 = 2;
  inline bool has_value_1() const;
  inline void clear_value_1();
  static const int kValue1FieldNumber = 2;
  inline double value_1() const;
  inline void set_value_1(double value);
  
  // required double value_2 = 3;
  inline bool has_value_2() const;
  inline void clear_value_2();
  static const int kValue2FieldNumber = 3;
  inline double value_2() const;
  inline void set_value_2(double value);
  
  // required double value_3 = 4;
  inline bool has_value_3() const;
  inline void clear_value_3();
  static const int kValue3FieldNumber = 4;
  inline double value_3() const;
  inline void set_value_3(double value);
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Vec4d)
 private:
  inline void set_has_value_0();
  inline void clear_has_value_0();
  inline void set_has_value_1();
  inline void clear_has_value_1();
  inline void set_has_value_2();
  inline void clear_has_value_2();
  inline void set_has_value_3();
  inline void clear_has_value_3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double value_0_;
  double value_1_;
  double value_2_;
  double value_3_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Vec4d* default_instance_;
};
// -------------------------------------------------------------------

class Quat : public ::google::protobuf::Message {
 public:
  Quat();
  virtual ~Quat();
  
  Quat(const Quat& from);
  
  inline Quat& operator=(const Quat& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Quat& default_instance();
  
  void Swap(Quat* other);
  
  // implements Message ----------------------------------------------
  
  Quat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Quat& from);
  void MergeFrom(const Quat& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double value_0 = 1;
  inline bool has_value_0() const;
  inline void clear_value_0();
  static const int kValue0FieldNumber = 1;
  inline double value_0() const;
  inline void set_value_0(double value);
  
  // required double value_1 = 2;
  inline bool has_value_1() const;
  inline void clear_value_1();
  static const int kValue1FieldNumber = 2;
  inline double value_1() const;
  inline void set_value_1(double value);
  
  // required double value_2 = 3;
  inline bool has_value_2() const;
  inline void clear_value_2();
  static const int kValue2FieldNumber = 3;
  inline double value_2() const;
  inline void set_value_2(double value);
  
  // required double value_3 = 4;
  inline bool has_value_3() const;
  inline void clear_value_3();
  static const int kValue3FieldNumber = 4;
  inline double value_3() const;
  inline void set_value_3(double value);
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Quat)
 private:
  inline void set_has_value_0();
  inline void clear_has_value_0();
  inline void set_has_value_1();
  inline void clear_has_value_1();
  inline void set_has_value_2();
  inline void clear_has_value_2();
  inline void set_has_value_3();
  inline void clear_has_value_3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double value_0_;
  double value_1_;
  double value_2_;
  double value_3_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Quat* default_instance_;
};
// -------------------------------------------------------------------

class Matrix : public ::google::protobuf::Message {
 public:
  Matrix();
  virtual ~Matrix();
  
  Matrix(const Matrix& from);
  
  inline Matrix& operator=(const Matrix& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Matrix& default_instance();
  
  void Swap(Matrix* other);
  
  // implements Message ----------------------------------------------
  
  Matrix* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Matrix& from);
  void MergeFrom(const Matrix& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double value_0 = 1;
  inline bool has_value_0() const;
  inline void clear_value_0();
  static const int kValue0FieldNumber = 1;
  inline double value_0() const;
  inline void set_value_0(double value);
  
  // required double value_1 = 2;
  inline bool has_value_1() const;
  inline void clear_value_1();
  static const int kValue1FieldNumber = 2;
  inline double value_1() const;
  inline void set_value_1(double value);
  
  // required double value_2 = 3;
  inline bool has_value_2() const;
  inline void clear_value_2();
  static const int kValue2FieldNumber = 3;
  inline double value_2() const;
  inline void set_value_2(double value);
  
  // required double value_3 = 4;
  inline bool has_value_3() const;
  inline void clear_value_3();
  static const int kValue3FieldNumber = 4;
  inline double value_3() const;
  inline void set_value_3(double value);
  
  // required double value_4 = 5;
  inline bool has_value_4() const;
  inline void clear_value_4();
  static const int kValue4FieldNumber = 5;
  inline double value_4() const;
  inline void set_value_4(double value);
  
  // required double value_5 = 6;
  inline bool has_value_5() const;
  inline void clear_value_5();
  static const int kValue5FieldNumber = 6;
  inline double value_5() const;
  inline void set_value_5(double value);
  
  // required double value_6 = 7;
  inline bool has_value_6() const;
  inline void clear_value_6();
  static const int kValue6FieldNumber = 7;
  inline double value_6() const;
  inline void set_value_6(double value);
  
  // required double value_7 = 8;
  inline bool has_value_7() const;
  inline void clear_value_7();
  static const int kValue7FieldNumber = 8;
  inline double value_7() const;
  inline void set_value_7(double value);
  
  // required double value_8 = 9;
  inline bool has_value_8() const;
  inline void clear_value_8();
  static const int kValue8FieldNumber = 9;
  inline double value_8() const;
  inline void set_value_8(double value);
  
  // required double value_9 = 10;
  inline bool has_value_9() const;
  inline void clear_value_9();
  static const int kValue9FieldNumber = 10;
  inline double value_9() const;
  inline void set_value_9(double value);
  
  // required double value_10 = 11;
  inline bool has_value_10() const;
  inline void clear_value_10();
  static const int kValue10FieldNumber = 11;
  inline double value_10() const;
  inline void set_value_10(double value);
  
  // required double value_11 = 12;
  inline bool has_value_11() const;
  inline void clear_value_11();
  static const int kValue11FieldNumber = 12;
  inline double value_11() const;
  inline void set_value_11(double value);
  
  // required double value_12 = 13;
  inline bool has_value_12() const;
  inline void clear_value_12();
  static const int kValue12FieldNumber = 13;
  inline double value_12() const;
  inline void set_value_12(double value);
  
  // required double value_13 = 14;
  inline bool has_value_13() const;
  inline void clear_value_13();
  static const int kValue13FieldNumber = 14;
  inline double value_13() const;
  inline void set_value_13(double value);
  
  // required double value_14 = 15;
  inline bool has_value_14() const;
  inline void clear_value_14();
  static const int kValue14FieldNumber = 15;
  inline double value_14() const;
  inline void set_value_14(double value);
  
  // required double value_15 = 16;
  inline bool has_value_15() const;
  inline void clear_value_15();
  static const int kValue15FieldNumber = 16;
  inline double value_15() const;
  inline void set_value_15(double value);
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Matrix)
 private:
  inline void set_has_value_0();
  inline void clear_has_value_0();
  inline void set_has_value_1();
  inline void clear_has_value_1();
  inline void set_has_value_2();
  inline void clear_has_value_2();
  inline void set_has_value_3();
  inline void clear_has_value_3();
  inline void set_has_value_4();
  inline void clear_has_value_4();
  inline void set_has_value_5();
  inline void clear_has_value_5();
  inline void set_has_value_6();
  inline void clear_has_value_6();
  inline void set_has_value_7();
  inline void clear_has_value_7();
  inline void set_has_value_8();
  inline void clear_has_value_8();
  inline void set_has_value_9();
  inline void clear_has_value_9();
  inline void set_has_value_10();
  inline void clear_has_value_10();
  inline void set_has_value_11();
  inline void clear_has_value_11();
  inline void set_has_value_12();
  inline void clear_has_value_12();
  inline void set_has_value_13();
  inline void clear_has_value_13();
  inline void set_has_value_14();
  inline void clear_has_value_14();
  inline void set_has_value_15();
  inline void clear_has_value_15();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double value_0_;
  double value_1_;
  double value_2_;
  double value_3_;
  double value_4_;
  double value_5_;
  double value_6_;
  double value_7_;
  double value_8_;
  double value_9_;
  double value_10_;
  double value_11_;
  double value_12_;
  double value_13_;
  double value_14_;
  double value_15_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Matrix* default_instance_;
};
// -------------------------------------------------------------------

class Property : public ::google::protobuf::Message {
 public:
  Property();
  virtual ~Property();
  
  Property(const Property& from);
  
  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();
  
  void Swap(Property* other);
  
  // implements Message ----------------------------------------------
  
  Property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dtProtoBuf.PropertyType type = 1 [default = NONE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline dtProtoBuf::PropertyType type() const;
  inline void set_type(dtProtoBuf::PropertyType value);
  
  // required uint32 property_name = 2;
  inline bool has_property_name() const;
  inline void clear_property_name();
  static const int kPropertyNameFieldNumber = 2;
  inline ::google::protobuf::uint32 property_name() const;
  inline void set_property_name(::google::protobuf::uint32 value);
  
  // repeated .dtProtoBuf.Property value_array = 3;
  inline int value_array_size() const;
  inline void clear_value_array();
  static const int kValueArrayFieldNumber = 3;
  inline const ::dtProtoBuf::Property& value_array(int index) const;
  inline ::dtProtoBuf::Property* mutable_value_array(int index);
  inline ::dtProtoBuf::Property* add_value_array();
  inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >&
      value_array() const;
  inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >*
      mutable_value_array();
  
  // optional bool value_bool = 4;
  inline bool has_value_bool() const;
  inline void clear_value_bool();
  static const int kValueBoolFieldNumber = 4;
  inline bool value_bool() const;
  inline void set_value_bool(bool value);
  
  // optional int32 value_char = 5;
  inline bool has_value_char() const;
  inline void clear_value_char();
  static const int kValueCharFieldNumber = 5;
  inline ::google::protobuf::int32 value_char() const;
  inline void set_value_char(::google::protobuf::int32 value);
  
  // optional double value_double = 6;
  inline bool has_value_double() const;
  inline void clear_value_double();
  static const int kValueDoubleFieldNumber = 6;
  inline double value_double() const;
  inline void set_value_double(double value);
  
  // optional float value_float = 7;
  inline bool has_value_float() const;
  inline void clear_value_float();
  static const int kValueFloatFieldNumber = 7;
  inline float value_float() const;
  inline void set_value_float(float value);
  
  // optional .dtProtoBuf.Property property_value = 8;
  inline bool has_property_value() const;
  inline void clear_property_value();
  static const int kPropertyValueFieldNumber = 8;
  inline const ::dtProtoBuf::Property& property_value() const;
  inline ::dtProtoBuf::Property* mutable_property_value();
  inline ::dtProtoBuf::Property* release_property_value();
  
  // optional int32 value_int = 9;
  inline bool has_value_int() const;
  inline void clear_value_int();
  static const int kValueIntFieldNumber = 9;
  inline ::google::protobuf::int32 value_int() const;
  inline void set_value_int(::google::protobuf::int32 value);
  
  // optional .dtProtoBuf.Matrix value_matrix = 10;
  inline bool has_value_matrix() const;
  inline void clear_value_matrix();
  static const int kValueMatrixFieldNumber = 10;
  inline const ::dtProtoBuf::Matrix& value_matrix() const;
  inline ::dtProtoBuf::Matrix* mutable_value_matrix();
  inline ::dtProtoBuf::Matrix* release_value_matrix();
  
  // optional .dtProtoBuf.Quat value_quat = 11;
  inline bool has_value_quat() const;
  inline void clear_value_quat();
  static const int kValueQuatFieldNumber = 11;
  inline const ::dtProtoBuf::Quat& value_quat() const;
  inline ::dtProtoBuf::Quat* mutable_value_quat();
  inline ::dtProtoBuf::Quat* release_value_quat();
  
  // optional string value_string = 12;
  inline bool has_value_string() const;
  inline void clear_value_string();
  static const int kValueStringFieldNumber = 12;
  inline const ::std::string& value_string() const;
  inline void set_value_string(const ::std::string& value);
  inline void set_value_string(const char* value);
  inline void set_value_string(const char* value, size_t size);
  inline ::std::string* mutable_value_string();
  inline ::std::string* release_value_string();
  
  // optional uint32 value_stringid = 13;
  inline bool has_value_stringid() const;
  inline void clear_value_stringid();
  static const int kValueStringidFieldNumber = 13;
  inline ::google::protobuf::uint32 value_stringid() const;
  inline void set_value_stringid(::google::protobuf::uint32 value);
  
  // optional uint32 value_uint = 14;
  inline bool has_value_uint() const;
  inline void clear_value_uint();
  static const int kValueUintFieldNumber = 14;
  inline ::google::protobuf::uint32 value_uint() const;
  inline void set_value_uint(::google::protobuf::uint32 value);
  
  // optional .dtProtoBuf.Vec2 value_vec2 = 15;
  inline bool has_value_vec2() const;
  inline void clear_value_vec2();
  static const int kValueVec2FieldNumber = 15;
  inline const ::dtProtoBuf::Vec2& value_vec2() const;
  inline ::dtProtoBuf::Vec2* mutable_value_vec2();
  inline ::dtProtoBuf::Vec2* release_value_vec2();
  
  // optional .dtProtoBuf.Vec3 value_vec3 = 16;
  inline bool has_value_vec3() const;
  inline void clear_value_vec3();
  static const int kValueVec3FieldNumber = 16;
  inline const ::dtProtoBuf::Vec3& value_vec3() const;
  inline ::dtProtoBuf::Vec3* mutable_value_vec3();
  inline ::dtProtoBuf::Vec3* release_value_vec3();
  
  // optional .dtProtoBuf.Vec4 value_vec4 = 17;
  inline bool has_value_vec4() const;
  inline void clear_value_vec4();
  static const int kValueVec4FieldNumber = 17;
  inline const ::dtProtoBuf::Vec4& value_vec4() const;
  inline ::dtProtoBuf::Vec4* mutable_value_vec4();
  inline ::dtProtoBuf::Vec4* release_value_vec4();
  
  // optional .dtProtoBuf.Vec2d value_vec2d = 18;
  inline bool has_value_vec2d() const;
  inline void clear_value_vec2d();
  static const int kValueVec2DFieldNumber = 18;
  inline const ::dtProtoBuf::Vec2d& value_vec2d() const;
  inline ::dtProtoBuf::Vec2d* mutable_value_vec2d();
  inline ::dtProtoBuf::Vec2d* release_value_vec2d();
  
  // optional .dtProtoBuf.Vec3d value_vec3d = 19;
  inline bool has_value_vec3d() const;
  inline void clear_value_vec3d();
  static const int kValueVec3DFieldNumber = 19;
  inline const ::dtProtoBuf::Vec3d& value_vec3d() const;
  inline ::dtProtoBuf::Vec3d* mutable_value_vec3d();
  inline ::dtProtoBuf::Vec3d* release_value_vec3d();
  
  // optional .dtProtoBuf.Vec4d value_vec4d = 20;
  inline bool has_value_vec4d() const;
  inline void clear_value_vec4d();
  static const int kValueVec4DFieldNumber = 20;
  inline const ::dtProtoBuf::Vec4d& value_vec4d() const;
  inline ::dtProtoBuf::Vec4d* mutable_value_vec4d();
  inline ::dtProtoBuf::Vec4d* release_value_vec4d();
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Property)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_property_name();
  inline void clear_has_property_name();
  inline void set_has_value_bool();
  inline void clear_has_value_bool();
  inline void set_has_value_char();
  inline void clear_has_value_char();
  inline void set_has_value_double();
  inline void clear_has_value_double();
  inline void set_has_value_float();
  inline void clear_has_value_float();
  inline void set_has_property_value();
  inline void clear_has_property_value();
  inline void set_has_value_int();
  inline void clear_has_value_int();
  inline void set_has_value_matrix();
  inline void clear_has_value_matrix();
  inline void set_has_value_quat();
  inline void clear_has_value_quat();
  inline void set_has_value_string();
  inline void clear_has_value_string();
  inline void set_has_value_stringid();
  inline void clear_has_value_stringid();
  inline void set_has_value_uint();
  inline void clear_has_value_uint();
  inline void set_has_value_vec2();
  inline void clear_has_value_vec2();
  inline void set_has_value_vec3();
  inline void clear_has_value_vec3();
  inline void set_has_value_vec4();
  inline void clear_has_value_vec4();
  inline void set_has_value_vec2d();
  inline void clear_has_value_vec2d();
  inline void set_has_value_vec3d();
  inline void clear_has_value_vec3d();
  inline void set_has_value_vec4d();
  inline void clear_has_value_vec4d();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int type_;
  ::google::protobuf::uint32 property_name_;
  ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property > value_array_;
  bool value_bool_;
  ::google::protobuf::int32 value_char_;
  double value_double_;
  ::dtProtoBuf::Property* property_value_;
  float value_float_;
  ::google::protobuf::int32 value_int_;
  ::dtProtoBuf::Matrix* value_matrix_;
  ::dtProtoBuf::Quat* value_quat_;
  ::std::string* value_string_;
  ::google::protobuf::uint32 value_stringid_;
  ::google::protobuf::uint32 value_uint_;
  ::dtProtoBuf::Vec2* value_vec2_;
  ::dtProtoBuf::Vec3* value_vec3_;
  ::dtProtoBuf::Vec4* value_vec4_;
  ::dtProtoBuf::Vec2d* value_vec2d_;
  ::dtProtoBuf::Vec3d* value_vec3d_;
  ::dtProtoBuf::Vec4d* value_vec4d_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Property* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();
  
  Message(const Message& from);
  
  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();
  
  void Swap(Message* other);
  
  // implements Message ----------------------------------------------
  
  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 message_type = 1;
  inline bool has_message_type() const;
  inline void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 message_type() const;
  inline void set_message_type(::google::protobuf::uint32 value);
  
  // repeated .dtProtoBuf.Property property = 2;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 2;
  inline const ::dtProtoBuf::Property& property(int index) const;
  inline ::dtProtoBuf::Property* mutable_property(int index);
  inline ::dtProtoBuf::Property* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >*
      mutable_property();
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Message)
 private:
  inline void set_has_message_type();
  inline void clear_has_message_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property > property_;
  ::google::protobuf::uint32 message_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// -------------------------------------------------------------------

class Component : public ::google::protobuf::Message {
 public:
  Component();
  virtual ~Component();
  
  Component(const Component& from);
  
  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Component& default_instance();
  
  void Swap(Component* other);
  
  // implements Message ----------------------------------------------
  
  Component* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 component_type = 1;
  inline bool has_component_type() const;
  inline void clear_component_type();
  static const int kComponentTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 component_type() const;
  inline void set_component_type(::google::protobuf::uint32 value);
  
  // repeated .dtProtoBuf.Property property = 2;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 2;
  inline const ::dtProtoBuf::Property& property(int index) const;
  inline ::dtProtoBuf::Property* mutable_property(int index);
  inline ::dtProtoBuf::Property* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >*
      mutable_property();
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Component)
 private:
  inline void set_has_component_type();
  inline void clear_has_component_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property > property_;
  ::google::protobuf::uint32 component_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Component* default_instance_;
};
// -------------------------------------------------------------------

class EntitySystem : public ::google::protobuf::Message {
 public:
  EntitySystem();
  virtual ~EntitySystem();
  
  EntitySystem(const EntitySystem& from);
  
  inline EntitySystem& operator=(const EntitySystem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntitySystem& default_instance();
  
  void Swap(EntitySystem* other);
  
  // implements Message ----------------------------------------------
  
  EntitySystem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EntitySystem& from);
  void MergeFrom(const EntitySystem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 component_type = 1;
  inline bool has_component_type() const;
  inline void clear_component_type();
  static const int kComponentTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 component_type() const;
  inline void set_component_type(::google::protobuf::uint32 value);
  
  // repeated .dtProtoBuf.Property property = 2;
  inline int property_size() const;
  inline void clear_property();
  static const int kPropertyFieldNumber = 2;
  inline const ::dtProtoBuf::Property& property(int index) const;
  inline ::dtProtoBuf::Property* mutable_property(int index);
  inline ::dtProtoBuf::Property* add_property();
  inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >&
      property() const;
  inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >*
      mutable_property();
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.EntitySystem)
 private:
  inline void set_has_component_type();
  inline void clear_has_component_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property > property_;
  ::google::protobuf::uint32 component_type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static EntitySystem* default_instance_;
};
// -------------------------------------------------------------------

class Entity : public ::google::protobuf::Message {
 public:
  Entity();
  virtual ~Entity();
  
  Entity(const Entity& from);
  
  inline Entity& operator=(const Entity& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Entity& default_instance();
  
  void Swap(Entity* other);
  
  // implements Message ----------------------------------------------
  
  Entity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entity& from);
  void MergeFrom(const Entity& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string spawner = 1;
  inline bool has_spawner() const;
  inline void clear_spawner();
  static const int kSpawnerFieldNumber = 1;
  inline const ::std::string& spawner() const;
  inline void set_spawner(const ::std::string& value);
  inline void set_spawner(const char* value);
  inline void set_spawner(const char* value, size_t size);
  inline ::std::string* mutable_spawner();
  inline ::std::string* release_spawner();
  
  // repeated .dtProtoBuf.Component component = 2;
  inline int component_size() const;
  inline void clear_component();
  static const int kComponentFieldNumber = 2;
  inline const ::dtProtoBuf::Component& component(int index) const;
  inline ::dtProtoBuf::Component* mutable_component(int index);
  inline ::dtProtoBuf::Component* add_component();
  inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Component >&
      component() const;
  inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Component >*
      mutable_component();
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Entity)
 private:
  inline void set_has_spawner();
  inline void clear_has_spawner();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* spawner_;
  ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Component > component_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Entity* default_instance_;
};
// -------------------------------------------------------------------

class Spawner : public ::google::protobuf::Message {
 public:
  Spawner();
  virtual ~Spawner();
  
  Spawner(const Spawner& from);
  
  inline Spawner& operator=(const Spawner& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Spawner& default_instance();
  
  void Swap(Spawner* other);
  
  // implements Message ----------------------------------------------
  
  Spawner* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Spawner& from);
  void MergeFrom(const Spawner& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .dtProtoBuf.Component component = 1;
  inline int component_size() const;
  inline void clear_component();
  static const int kComponentFieldNumber = 1;
  inline const ::dtProtoBuf::Component& component(int index) const;
  inline ::dtProtoBuf::Component* mutable_component(int index);
  inline ::dtProtoBuf::Component* add_component();
  inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Component >&
      component() const;
  inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Component >*
      mutable_component();
  
  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional string parent = 3;
  inline bool has_parent() const;
  inline void clear_parent();
  static const int kParentFieldNumber = 3;
  inline const ::std::string& parent() const;
  inline void set_parent(const ::std::string& value);
  inline void set_parent(const char* value);
  inline void set_parent(const char* value, size_t size);
  inline ::std::string* mutable_parent();
  inline ::std::string* release_parent();
  
  // optional bool addToSpawnerStore = 4;
  inline bool has_addtospawnerstore() const;
  inline void clear_addtospawnerstore();
  static const int kAddToSpawnerStoreFieldNumber = 4;
  inline bool addtospawnerstore() const;
  inline void set_addtospawnerstore(bool value);
  
  // optional string guiCategory = 5;
  inline bool has_guicategory() const;
  inline void clear_guicategory();
  static const int kGuiCategoryFieldNumber = 5;
  inline const ::std::string& guicategory() const;
  inline void set_guicategory(const ::std::string& value);
  inline void set_guicategory(const char* value);
  inline void set_guicategory(const char* value, size_t size);
  inline ::std::string* mutable_guicategory();
  inline ::std::string* release_guicategory();
  
  // optional string iconPath = 6;
  inline bool has_iconpath() const;
  inline void clear_iconpath();
  static const int kIconPathFieldNumber = 6;
  inline const ::std::string& iconpath() const;
  inline void set_iconpath(const ::std::string& value);
  inline void set_iconpath(const char* value);
  inline void set_iconpath(const char* value, size_t size);
  inline ::std::string* mutable_iconpath();
  inline ::std::string* release_iconpath();
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Spawner)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_parent();
  inline void clear_has_parent();
  inline void set_has_addtospawnerstore();
  inline void clear_has_addtospawnerstore();
  inline void set_has_guicategory();
  inline void clear_has_guicategory();
  inline void set_has_iconpath();
  inline void clear_has_iconpath();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Component > component_;
  ::std::string* name_;
  ::std::string* parent_;
  ::std::string* guicategory_;
  ::std::string* iconpath_;
  bool addtospawnerstore_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Spawner* default_instance_;
};
// -------------------------------------------------------------------

class Map : public ::google::protobuf::Message {
 public:
  Map();
  virtual ~Map();
  
  Map(const Map& from);
  
  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Map& default_instance();
  
  void Swap(Map* other);
  
  // implements Message ----------------------------------------------
  
  Map* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .dtProtoBuf.Spawner spawner = 1;
  inline int spawner_size() const;
  inline void clear_spawner();
  static const int kSpawnerFieldNumber = 1;
  inline const ::dtProtoBuf::Spawner& spawner(int index) const;
  inline ::dtProtoBuf::Spawner* mutable_spawner(int index);
  inline ::dtProtoBuf::Spawner* add_spawner();
  inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Spawner >&
      spawner() const;
  inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Spawner >*
      mutable_spawner();
  
  // repeated .dtProtoBuf.Entity entity = 2;
  inline int entity_size() const;
  inline void clear_entity();
  static const int kEntityFieldNumber = 2;
  inline const ::dtProtoBuf::Entity& entity(int index) const;
  inline ::dtProtoBuf::Entity* mutable_entity(int index);
  inline ::dtProtoBuf::Entity* add_entity();
  inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Entity >&
      entity() const;
  inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Entity >*
      mutable_entity();
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Map)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Spawner > spawner_;
  ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Entity > entity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Map* default_instance_;
};
// -------------------------------------------------------------------

class Scene : public ::google::protobuf::Message {
 public:
  Scene();
  virtual ~Scene();
  
  Scene(const Scene& from);
  
  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Scene& default_instance();
  
  void Swap(Scene* other);
  
  // implements Message ----------------------------------------------
  
  Scene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string libraries = 1;
  inline int libraries_size() const;
  inline void clear_libraries();
  static const int kLibrariesFieldNumber = 1;
  inline const ::std::string& libraries(int index) const;
  inline ::std::string* mutable_libraries(int index);
  inline void set_libraries(int index, const ::std::string& value);
  inline void set_libraries(int index, const char* value);
  inline void set_libraries(int index, const char* value, size_t size);
  inline ::std::string* add_libraries();
  inline void add_libraries(const ::std::string& value);
  inline void add_libraries(const char* value);
  inline void add_libraries(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& libraries() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_libraries();
  
  // repeated .dtProtoBuf.EntitySystem entitysystem = 2;
  inline int entitysystem_size() const;
  inline void clear_entitysystem();
  static const int kEntitysystemFieldNumber = 2;
  inline const ::dtProtoBuf::EntitySystem& entitysystem(int index) const;
  inline ::dtProtoBuf::EntitySystem* mutable_entitysystem(int index);
  inline ::dtProtoBuf::EntitySystem* add_entitysystem();
  inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::EntitySystem >&
      entitysystem() const;
  inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::EntitySystem >*
      mutable_entitysystem();
  
  // repeated string map = 3;
  inline int map_size() const;
  inline void clear_map();
  static const int kMapFieldNumber = 3;
  inline const ::std::string& map(int index) const;
  inline ::std::string* mutable_map(int index);
  inline void set_map(int index, const ::std::string& value);
  inline void set_map(int index, const char* value);
  inline void set_map(int index, const char* value, size_t size);
  inline ::std::string* add_map();
  inline void add_map(const ::std::string& value);
  inline void add_map(const char* value);
  inline void add_map(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& map() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_map();
  
  // @@protoc_insertion_point(class_scope:dtProtoBuf.Scene)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> libraries_;
  ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::EntitySystem > entitysystem_;
  ::google::protobuf::RepeatedPtrField< ::std::string> map_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_data_2eproto();
  friend void protobuf_AssignDesc_data_2eproto();
  friend void protobuf_ShutdownFile_data_2eproto();
  
  void InitAsDefaultInstance();
  static Scene* default_instance_;
};
// ===================================================================


// ===================================================================

// Vec2

// required float value_0 = 1;
inline bool Vec2::has_value_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec2::set_has_value_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec2::clear_has_value_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec2::clear_value_0() {
  value_0_ = 0;
  clear_has_value_0();
}
inline float Vec2::value_0() const {
  return value_0_;
}
inline void Vec2::set_value_0(float value) {
  set_has_value_0();
  value_0_ = value;
}

// required float value_1 = 2;
inline bool Vec2::has_value_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec2::set_has_value_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec2::clear_has_value_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec2::clear_value_1() {
  value_1_ = 0;
  clear_has_value_1();
}
inline float Vec2::value_1() const {
  return value_1_;
}
inline void Vec2::set_value_1(float value) {
  set_has_value_1();
  value_1_ = value;
}

// -------------------------------------------------------------------

// Vec3

// required float value_0 = 1;
inline bool Vec3::has_value_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec3::set_has_value_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec3::clear_has_value_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec3::clear_value_0() {
  value_0_ = 0;
  clear_has_value_0();
}
inline float Vec3::value_0() const {
  return value_0_;
}
inline void Vec3::set_value_0(float value) {
  set_has_value_0();
  value_0_ = value;
}

// required float value_1 = 2;
inline bool Vec3::has_value_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec3::set_has_value_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec3::clear_has_value_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec3::clear_value_1() {
  value_1_ = 0;
  clear_has_value_1();
}
inline float Vec3::value_1() const {
  return value_1_;
}
inline void Vec3::set_value_1(float value) {
  set_has_value_1();
  value_1_ = value;
}

// required float value_2 = 3;
inline bool Vec3::has_value_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec3::set_has_value_2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vec3::clear_has_value_2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vec3::clear_value_2() {
  value_2_ = 0;
  clear_has_value_2();
}
inline float Vec3::value_2() const {
  return value_2_;
}
inline void Vec3::set_value_2(float value) {
  set_has_value_2();
  value_2_ = value;
}

// -------------------------------------------------------------------

// Vec4

// required float value_0 = 1;
inline bool Vec4::has_value_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec4::set_has_value_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec4::clear_has_value_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec4::clear_value_0() {
  value_0_ = 0;
  clear_has_value_0();
}
inline float Vec4::value_0() const {
  return value_0_;
}
inline void Vec4::set_value_0(float value) {
  set_has_value_0();
  value_0_ = value;
}

// required float value_1 = 2;
inline bool Vec4::has_value_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec4::set_has_value_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec4::clear_has_value_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec4::clear_value_1() {
  value_1_ = 0;
  clear_has_value_1();
}
inline float Vec4::value_1() const {
  return value_1_;
}
inline void Vec4::set_value_1(float value) {
  set_has_value_1();
  value_1_ = value;
}

// required float value_2 = 3;
inline bool Vec4::has_value_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec4::set_has_value_2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vec4::clear_has_value_2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vec4::clear_value_2() {
  value_2_ = 0;
  clear_has_value_2();
}
inline float Vec4::value_2() const {
  return value_2_;
}
inline void Vec4::set_value_2(float value) {
  set_has_value_2();
  value_2_ = value;
}

// required float value_3 = 4;
inline bool Vec4::has_value_3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vec4::set_has_value_3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vec4::clear_has_value_3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vec4::clear_value_3() {
  value_3_ = 0;
  clear_has_value_3();
}
inline float Vec4::value_3() const {
  return value_3_;
}
inline void Vec4::set_value_3(float value) {
  set_has_value_3();
  value_3_ = value;
}

// -------------------------------------------------------------------

// Vec2d

// required double value_0 = 1;
inline bool Vec2d::has_value_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec2d::set_has_value_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec2d::clear_has_value_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec2d::clear_value_0() {
  value_0_ = 0;
  clear_has_value_0();
}
inline double Vec2d::value_0() const {
  return value_0_;
}
inline void Vec2d::set_value_0(double value) {
  set_has_value_0();
  value_0_ = value;
}

// required double value_1 = 2;
inline bool Vec2d::has_value_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec2d::set_has_value_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec2d::clear_has_value_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec2d::clear_value_1() {
  value_1_ = 0;
  clear_has_value_1();
}
inline double Vec2d::value_1() const {
  return value_1_;
}
inline void Vec2d::set_value_1(double value) {
  set_has_value_1();
  value_1_ = value;
}

// -------------------------------------------------------------------

// Vec3d

// required double value_0 = 1;
inline bool Vec3d::has_value_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec3d::set_has_value_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec3d::clear_has_value_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec3d::clear_value_0() {
  value_0_ = 0;
  clear_has_value_0();
}
inline double Vec3d::value_0() const {
  return value_0_;
}
inline void Vec3d::set_value_0(double value) {
  set_has_value_0();
  value_0_ = value;
}

// required double value_1 = 2;
inline bool Vec3d::has_value_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec3d::set_has_value_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec3d::clear_has_value_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec3d::clear_value_1() {
  value_1_ = 0;
  clear_has_value_1();
}
inline double Vec3d::value_1() const {
  return value_1_;
}
inline void Vec3d::set_value_1(double value) {
  set_has_value_1();
  value_1_ = value;
}

// required double value_2 = 3;
inline bool Vec3d::has_value_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec3d::set_has_value_2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vec3d::clear_has_value_2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vec3d::clear_value_2() {
  value_2_ = 0;
  clear_has_value_2();
}
inline double Vec3d::value_2() const {
  return value_2_;
}
inline void Vec3d::set_value_2(double value) {
  set_has_value_2();
  value_2_ = value;
}

// -------------------------------------------------------------------

// Vec4d

// required double value_0 = 1;
inline bool Vec4d::has_value_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vec4d::set_has_value_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vec4d::clear_has_value_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vec4d::clear_value_0() {
  value_0_ = 0;
  clear_has_value_0();
}
inline double Vec4d::value_0() const {
  return value_0_;
}
inline void Vec4d::set_value_0(double value) {
  set_has_value_0();
  value_0_ = value;
}

// required double value_1 = 2;
inline bool Vec4d::has_value_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vec4d::set_has_value_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vec4d::clear_has_value_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vec4d::clear_value_1() {
  value_1_ = 0;
  clear_has_value_1();
}
inline double Vec4d::value_1() const {
  return value_1_;
}
inline void Vec4d::set_value_1(double value) {
  set_has_value_1();
  value_1_ = value;
}

// required double value_2 = 3;
inline bool Vec4d::has_value_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vec4d::set_has_value_2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vec4d::clear_has_value_2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vec4d::clear_value_2() {
  value_2_ = 0;
  clear_has_value_2();
}
inline double Vec4d::value_2() const {
  return value_2_;
}
inline void Vec4d::set_value_2(double value) {
  set_has_value_2();
  value_2_ = value;
}

// required double value_3 = 4;
inline bool Vec4d::has_value_3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Vec4d::set_has_value_3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Vec4d::clear_has_value_3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Vec4d::clear_value_3() {
  value_3_ = 0;
  clear_has_value_3();
}
inline double Vec4d::value_3() const {
  return value_3_;
}
inline void Vec4d::set_value_3(double value) {
  set_has_value_3();
  value_3_ = value;
}

// -------------------------------------------------------------------

// Quat

// required double value_0 = 1;
inline bool Quat::has_value_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Quat::set_has_value_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Quat::clear_has_value_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Quat::clear_value_0() {
  value_0_ = 0;
  clear_has_value_0();
}
inline double Quat::value_0() const {
  return value_0_;
}
inline void Quat::set_value_0(double value) {
  set_has_value_0();
  value_0_ = value;
}

// required double value_1 = 2;
inline bool Quat::has_value_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Quat::set_has_value_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Quat::clear_has_value_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Quat::clear_value_1() {
  value_1_ = 0;
  clear_has_value_1();
}
inline double Quat::value_1() const {
  return value_1_;
}
inline void Quat::set_value_1(double value) {
  set_has_value_1();
  value_1_ = value;
}

// required double value_2 = 3;
inline bool Quat::has_value_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Quat::set_has_value_2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Quat::clear_has_value_2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Quat::clear_value_2() {
  value_2_ = 0;
  clear_has_value_2();
}
inline double Quat::value_2() const {
  return value_2_;
}
inline void Quat::set_value_2(double value) {
  set_has_value_2();
  value_2_ = value;
}

// required double value_3 = 4;
inline bool Quat::has_value_3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Quat::set_has_value_3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Quat::clear_has_value_3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Quat::clear_value_3() {
  value_3_ = 0;
  clear_has_value_3();
}
inline double Quat::value_3() const {
  return value_3_;
}
inline void Quat::set_value_3(double value) {
  set_has_value_3();
  value_3_ = value;
}

// -------------------------------------------------------------------

// Matrix

// required double value_0 = 1;
inline bool Matrix::has_value_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Matrix::set_has_value_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Matrix::clear_has_value_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Matrix::clear_value_0() {
  value_0_ = 0;
  clear_has_value_0();
}
inline double Matrix::value_0() const {
  return value_0_;
}
inline void Matrix::set_value_0(double value) {
  set_has_value_0();
  value_0_ = value;
}

// required double value_1 = 2;
inline bool Matrix::has_value_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Matrix::set_has_value_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Matrix::clear_has_value_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Matrix::clear_value_1() {
  value_1_ = 0;
  clear_has_value_1();
}
inline double Matrix::value_1() const {
  return value_1_;
}
inline void Matrix::set_value_1(double value) {
  set_has_value_1();
  value_1_ = value;
}

// required double value_2 = 3;
inline bool Matrix::has_value_2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Matrix::set_has_value_2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Matrix::clear_has_value_2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Matrix::clear_value_2() {
  value_2_ = 0;
  clear_has_value_2();
}
inline double Matrix::value_2() const {
  return value_2_;
}
inline void Matrix::set_value_2(double value) {
  set_has_value_2();
  value_2_ = value;
}

// required double value_3 = 4;
inline bool Matrix::has_value_3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Matrix::set_has_value_3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Matrix::clear_has_value_3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Matrix::clear_value_3() {
  value_3_ = 0;
  clear_has_value_3();
}
inline double Matrix::value_3() const {
  return value_3_;
}
inline void Matrix::set_value_3(double value) {
  set_has_value_3();
  value_3_ = value;
}

// required double value_4 = 5;
inline bool Matrix::has_value_4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Matrix::set_has_value_4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Matrix::clear_has_value_4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Matrix::clear_value_4() {
  value_4_ = 0;
  clear_has_value_4();
}
inline double Matrix::value_4() const {
  return value_4_;
}
inline void Matrix::set_value_4(double value) {
  set_has_value_4();
  value_4_ = value;
}

// required double value_5 = 6;
inline bool Matrix::has_value_5() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Matrix::set_has_value_5() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Matrix::clear_has_value_5() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Matrix::clear_value_5() {
  value_5_ = 0;
  clear_has_value_5();
}
inline double Matrix::value_5() const {
  return value_5_;
}
inline void Matrix::set_value_5(double value) {
  set_has_value_5();
  value_5_ = value;
}

// required double value_6 = 7;
inline bool Matrix::has_value_6() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Matrix::set_has_value_6() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Matrix::clear_has_value_6() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Matrix::clear_value_6() {
  value_6_ = 0;
  clear_has_value_6();
}
inline double Matrix::value_6() const {
  return value_6_;
}
inline void Matrix::set_value_6(double value) {
  set_has_value_6();
  value_6_ = value;
}

// required double value_7 = 8;
inline bool Matrix::has_value_7() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Matrix::set_has_value_7() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Matrix::clear_has_value_7() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Matrix::clear_value_7() {
  value_7_ = 0;
  clear_has_value_7();
}
inline double Matrix::value_7() const {
  return value_7_;
}
inline void Matrix::set_value_7(double value) {
  set_has_value_7();
  value_7_ = value;
}

// required double value_8 = 9;
inline bool Matrix::has_value_8() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Matrix::set_has_value_8() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Matrix::clear_has_value_8() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Matrix::clear_value_8() {
  value_8_ = 0;
  clear_has_value_8();
}
inline double Matrix::value_8() const {
  return value_8_;
}
inline void Matrix::set_value_8(double value) {
  set_has_value_8();
  value_8_ = value;
}

// required double value_9 = 10;
inline bool Matrix::has_value_9() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Matrix::set_has_value_9() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Matrix::clear_has_value_9() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Matrix::clear_value_9() {
  value_9_ = 0;
  clear_has_value_9();
}
inline double Matrix::value_9() const {
  return value_9_;
}
inline void Matrix::set_value_9(double value) {
  set_has_value_9();
  value_9_ = value;
}

// required double value_10 = 11;
inline bool Matrix::has_value_10() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Matrix::set_has_value_10() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Matrix::clear_has_value_10() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Matrix::clear_value_10() {
  value_10_ = 0;
  clear_has_value_10();
}
inline double Matrix::value_10() const {
  return value_10_;
}
inline void Matrix::set_value_10(double value) {
  set_has_value_10();
  value_10_ = value;
}

// required double value_11 = 12;
inline bool Matrix::has_value_11() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Matrix::set_has_value_11() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Matrix::clear_has_value_11() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Matrix::clear_value_11() {
  value_11_ = 0;
  clear_has_value_11();
}
inline double Matrix::value_11() const {
  return value_11_;
}
inline void Matrix::set_value_11(double value) {
  set_has_value_11();
  value_11_ = value;
}

// required double value_12 = 13;
inline bool Matrix::has_value_12() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Matrix::set_has_value_12() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Matrix::clear_has_value_12() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Matrix::clear_value_12() {
  value_12_ = 0;
  clear_has_value_12();
}
inline double Matrix::value_12() const {
  return value_12_;
}
inline void Matrix::set_value_12(double value) {
  set_has_value_12();
  value_12_ = value;
}

// required double value_13 = 14;
inline bool Matrix::has_value_13() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Matrix::set_has_value_13() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Matrix::clear_has_value_13() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Matrix::clear_value_13() {
  value_13_ = 0;
  clear_has_value_13();
}
inline double Matrix::value_13() const {
  return value_13_;
}
inline void Matrix::set_value_13(double value) {
  set_has_value_13();
  value_13_ = value;
}

// required double value_14 = 15;
inline bool Matrix::has_value_14() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Matrix::set_has_value_14() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Matrix::clear_has_value_14() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Matrix::clear_value_14() {
  value_14_ = 0;
  clear_has_value_14();
}
inline double Matrix::value_14() const {
  return value_14_;
}
inline void Matrix::set_value_14(double value) {
  set_has_value_14();
  value_14_ = value;
}

// required double value_15 = 16;
inline bool Matrix::has_value_15() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Matrix::set_has_value_15() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Matrix::clear_has_value_15() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Matrix::clear_value_15() {
  value_15_ = 0;
  clear_has_value_15();
}
inline double Matrix::value_15() const {
  return value_15_;
}
inline void Matrix::set_value_15(double value) {
  set_has_value_15();
  value_15_ = value;
}

// -------------------------------------------------------------------

// Property

// optional .dtProtoBuf.PropertyType type = 1 [default = NONE];
inline bool Property::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Property::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Property::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Property::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline dtProtoBuf::PropertyType Property::type() const {
  return static_cast< dtProtoBuf::PropertyType >(type_);
}
inline void Property::set_type(dtProtoBuf::PropertyType value) {
  GOOGLE_DCHECK(dtProtoBuf::PropertyType_IsValid(value));
  set_has_type();
  type_ = value;
}

// required uint32 property_name = 2;
inline bool Property::has_property_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Property::set_has_property_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Property::clear_has_property_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Property::clear_property_name() {
  property_name_ = 0u;
  clear_has_property_name();
}
inline ::google::protobuf::uint32 Property::property_name() const {
  return property_name_;
}
inline void Property::set_property_name(::google::protobuf::uint32 value) {
  set_has_property_name();
  property_name_ = value;
}

// repeated .dtProtoBuf.Property value_array = 3;
inline int Property::value_array_size() const {
  return value_array_.size();
}
inline void Property::clear_value_array() {
  value_array_.Clear();
}
inline const ::dtProtoBuf::Property& Property::value_array(int index) const {
  return value_array_.Get(index);
}
inline ::dtProtoBuf::Property* Property::mutable_value_array(int index) {
  return value_array_.Mutable(index);
}
inline ::dtProtoBuf::Property* Property::add_value_array() {
  return value_array_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >&
Property::value_array() const {
  return value_array_;
}
inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >*
Property::mutable_value_array() {
  return &value_array_;
}

// optional bool value_bool = 4;
inline bool Property::has_value_bool() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Property::set_has_value_bool() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Property::clear_has_value_bool() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Property::clear_value_bool() {
  value_bool_ = false;
  clear_has_value_bool();
}
inline bool Property::value_bool() const {
  return value_bool_;
}
inline void Property::set_value_bool(bool value) {
  set_has_value_bool();
  value_bool_ = value;
}

// optional int32 value_char = 5;
inline bool Property::has_value_char() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Property::set_has_value_char() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Property::clear_has_value_char() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Property::clear_value_char() {
  value_char_ = 0;
  clear_has_value_char();
}
inline ::google::protobuf::int32 Property::value_char() const {
  return value_char_;
}
inline void Property::set_value_char(::google::protobuf::int32 value) {
  set_has_value_char();
  value_char_ = value;
}

// optional double value_double = 6;
inline bool Property::has_value_double() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Property::set_has_value_double() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Property::clear_has_value_double() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Property::clear_value_double() {
  value_double_ = 0;
  clear_has_value_double();
}
inline double Property::value_double() const {
  return value_double_;
}
inline void Property::set_value_double(double value) {
  set_has_value_double();
  value_double_ = value;
}

// optional float value_float = 7;
inline bool Property::has_value_float() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Property::set_has_value_float() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Property::clear_has_value_float() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Property::clear_value_float() {
  value_float_ = 0;
  clear_has_value_float();
}
inline float Property::value_float() const {
  return value_float_;
}
inline void Property::set_value_float(float value) {
  set_has_value_float();
  value_float_ = value;
}

// optional .dtProtoBuf.Property property_value = 8;
inline bool Property::has_property_value() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Property::set_has_property_value() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Property::clear_has_property_value() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Property::clear_property_value() {
  if (property_value_ != NULL) property_value_->::dtProtoBuf::Property::Clear();
  clear_has_property_value();
}
inline const ::dtProtoBuf::Property& Property::property_value() const {
  return property_value_ != NULL ? *property_value_ : *default_instance_->property_value_;
}
inline ::dtProtoBuf::Property* Property::mutable_property_value() {
  set_has_property_value();
  if (property_value_ == NULL) property_value_ = new ::dtProtoBuf::Property;
  return property_value_;
}
inline ::dtProtoBuf::Property* Property::release_property_value() {
  clear_has_property_value();
  ::dtProtoBuf::Property* temp = property_value_;
  property_value_ = NULL;
  return temp;
}

// optional int32 value_int = 9;
inline bool Property::has_value_int() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Property::set_has_value_int() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Property::clear_has_value_int() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Property::clear_value_int() {
  value_int_ = 0;
  clear_has_value_int();
}
inline ::google::protobuf::int32 Property::value_int() const {
  return value_int_;
}
inline void Property::set_value_int(::google::protobuf::int32 value) {
  set_has_value_int();
  value_int_ = value;
}

// optional .dtProtoBuf.Matrix value_matrix = 10;
inline bool Property::has_value_matrix() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Property::set_has_value_matrix() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Property::clear_has_value_matrix() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Property::clear_value_matrix() {
  if (value_matrix_ != NULL) value_matrix_->::dtProtoBuf::Matrix::Clear();
  clear_has_value_matrix();
}
inline const ::dtProtoBuf::Matrix& Property::value_matrix() const {
  return value_matrix_ != NULL ? *value_matrix_ : *default_instance_->value_matrix_;
}
inline ::dtProtoBuf::Matrix* Property::mutable_value_matrix() {
  set_has_value_matrix();
  if (value_matrix_ == NULL) value_matrix_ = new ::dtProtoBuf::Matrix;
  return value_matrix_;
}
inline ::dtProtoBuf::Matrix* Property::release_value_matrix() {
  clear_has_value_matrix();
  ::dtProtoBuf::Matrix* temp = value_matrix_;
  value_matrix_ = NULL;
  return temp;
}

// optional .dtProtoBuf.Quat value_quat = 11;
inline bool Property::has_value_quat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Property::set_has_value_quat() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Property::clear_has_value_quat() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Property::clear_value_quat() {
  if (value_quat_ != NULL) value_quat_->::dtProtoBuf::Quat::Clear();
  clear_has_value_quat();
}
inline const ::dtProtoBuf::Quat& Property::value_quat() const {
  return value_quat_ != NULL ? *value_quat_ : *default_instance_->value_quat_;
}
inline ::dtProtoBuf::Quat* Property::mutable_value_quat() {
  set_has_value_quat();
  if (value_quat_ == NULL) value_quat_ = new ::dtProtoBuf::Quat;
  return value_quat_;
}
inline ::dtProtoBuf::Quat* Property::release_value_quat() {
  clear_has_value_quat();
  ::dtProtoBuf::Quat* temp = value_quat_;
  value_quat_ = NULL;
  return temp;
}

// optional string value_string = 12;
inline bool Property::has_value_string() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Property::set_has_value_string() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Property::clear_has_value_string() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Property::clear_value_string() {
  if (value_string_ != &::google::protobuf::internal::kEmptyString) {
    value_string_->clear();
  }
  clear_has_value_string();
}
inline const ::std::string& Property::value_string() const {
  return *value_string_;
}
inline void Property::set_value_string(const ::std::string& value) {
  set_has_value_string();
  if (value_string_ == &::google::protobuf::internal::kEmptyString) {
    value_string_ = new ::std::string;
  }
  value_string_->assign(value);
}
inline void Property::set_value_string(const char* value) {
  set_has_value_string();
  if (value_string_ == &::google::protobuf::internal::kEmptyString) {
    value_string_ = new ::std::string;
  }
  value_string_->assign(value);
}
inline void Property::set_value_string(const char* value, size_t size) {
  set_has_value_string();
  if (value_string_ == &::google::protobuf::internal::kEmptyString) {
    value_string_ = new ::std::string;
  }
  value_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Property::mutable_value_string() {
  set_has_value_string();
  if (value_string_ == &::google::protobuf::internal::kEmptyString) {
    value_string_ = new ::std::string;
  }
  return value_string_;
}
inline ::std::string* Property::release_value_string() {
  clear_has_value_string();
  if (value_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_string_;
    value_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 value_stringid = 13;
inline bool Property::has_value_stringid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Property::set_has_value_stringid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Property::clear_has_value_stringid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Property::clear_value_stringid() {
  value_stringid_ = 0u;
  clear_has_value_stringid();
}
inline ::google::protobuf::uint32 Property::value_stringid() const {
  return value_stringid_;
}
inline void Property::set_value_stringid(::google::protobuf::uint32 value) {
  set_has_value_stringid();
  value_stringid_ = value;
}

// optional uint32 value_uint = 14;
inline bool Property::has_value_uint() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Property::set_has_value_uint() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Property::clear_has_value_uint() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Property::clear_value_uint() {
  value_uint_ = 0u;
  clear_has_value_uint();
}
inline ::google::protobuf::uint32 Property::value_uint() const {
  return value_uint_;
}
inline void Property::set_value_uint(::google::protobuf::uint32 value) {
  set_has_value_uint();
  value_uint_ = value;
}

// optional .dtProtoBuf.Vec2 value_vec2 = 15;
inline bool Property::has_value_vec2() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Property::set_has_value_vec2() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Property::clear_has_value_vec2() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Property::clear_value_vec2() {
  if (value_vec2_ != NULL) value_vec2_->::dtProtoBuf::Vec2::Clear();
  clear_has_value_vec2();
}
inline const ::dtProtoBuf::Vec2& Property::value_vec2() const {
  return value_vec2_ != NULL ? *value_vec2_ : *default_instance_->value_vec2_;
}
inline ::dtProtoBuf::Vec2* Property::mutable_value_vec2() {
  set_has_value_vec2();
  if (value_vec2_ == NULL) value_vec2_ = new ::dtProtoBuf::Vec2;
  return value_vec2_;
}
inline ::dtProtoBuf::Vec2* Property::release_value_vec2() {
  clear_has_value_vec2();
  ::dtProtoBuf::Vec2* temp = value_vec2_;
  value_vec2_ = NULL;
  return temp;
}

// optional .dtProtoBuf.Vec3 value_vec3 = 16;
inline bool Property::has_value_vec3() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Property::set_has_value_vec3() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Property::clear_has_value_vec3() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Property::clear_value_vec3() {
  if (value_vec3_ != NULL) value_vec3_->::dtProtoBuf::Vec3::Clear();
  clear_has_value_vec3();
}
inline const ::dtProtoBuf::Vec3& Property::value_vec3() const {
  return value_vec3_ != NULL ? *value_vec3_ : *default_instance_->value_vec3_;
}
inline ::dtProtoBuf::Vec3* Property::mutable_value_vec3() {
  set_has_value_vec3();
  if (value_vec3_ == NULL) value_vec3_ = new ::dtProtoBuf::Vec3;
  return value_vec3_;
}
inline ::dtProtoBuf::Vec3* Property::release_value_vec3() {
  clear_has_value_vec3();
  ::dtProtoBuf::Vec3* temp = value_vec3_;
  value_vec3_ = NULL;
  return temp;
}

// optional .dtProtoBuf.Vec4 value_vec4 = 17;
inline bool Property::has_value_vec4() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Property::set_has_value_vec4() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Property::clear_has_value_vec4() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Property::clear_value_vec4() {
  if (value_vec4_ != NULL) value_vec4_->::dtProtoBuf::Vec4::Clear();
  clear_has_value_vec4();
}
inline const ::dtProtoBuf::Vec4& Property::value_vec4() const {
  return value_vec4_ != NULL ? *value_vec4_ : *default_instance_->value_vec4_;
}
inline ::dtProtoBuf::Vec4* Property::mutable_value_vec4() {
  set_has_value_vec4();
  if (value_vec4_ == NULL) value_vec4_ = new ::dtProtoBuf::Vec4;
  return value_vec4_;
}
inline ::dtProtoBuf::Vec4* Property::release_value_vec4() {
  clear_has_value_vec4();
  ::dtProtoBuf::Vec4* temp = value_vec4_;
  value_vec4_ = NULL;
  return temp;
}

// optional .dtProtoBuf.Vec2d value_vec2d = 18;
inline bool Property::has_value_vec2d() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Property::set_has_value_vec2d() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Property::clear_has_value_vec2d() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Property::clear_value_vec2d() {
  if (value_vec2d_ != NULL) value_vec2d_->::dtProtoBuf::Vec2d::Clear();
  clear_has_value_vec2d();
}
inline const ::dtProtoBuf::Vec2d& Property::value_vec2d() const {
  return value_vec2d_ != NULL ? *value_vec2d_ : *default_instance_->value_vec2d_;
}
inline ::dtProtoBuf::Vec2d* Property::mutable_value_vec2d() {
  set_has_value_vec2d();
  if (value_vec2d_ == NULL) value_vec2d_ = new ::dtProtoBuf::Vec2d;
  return value_vec2d_;
}
inline ::dtProtoBuf::Vec2d* Property::release_value_vec2d() {
  clear_has_value_vec2d();
  ::dtProtoBuf::Vec2d* temp = value_vec2d_;
  value_vec2d_ = NULL;
  return temp;
}

// optional .dtProtoBuf.Vec3d value_vec3d = 19;
inline bool Property::has_value_vec3d() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Property::set_has_value_vec3d() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Property::clear_has_value_vec3d() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Property::clear_value_vec3d() {
  if (value_vec3d_ != NULL) value_vec3d_->::dtProtoBuf::Vec3d::Clear();
  clear_has_value_vec3d();
}
inline const ::dtProtoBuf::Vec3d& Property::value_vec3d() const {
  return value_vec3d_ != NULL ? *value_vec3d_ : *default_instance_->value_vec3d_;
}
inline ::dtProtoBuf::Vec3d* Property::mutable_value_vec3d() {
  set_has_value_vec3d();
  if (value_vec3d_ == NULL) value_vec3d_ = new ::dtProtoBuf::Vec3d;
  return value_vec3d_;
}
inline ::dtProtoBuf::Vec3d* Property::release_value_vec3d() {
  clear_has_value_vec3d();
  ::dtProtoBuf::Vec3d* temp = value_vec3d_;
  value_vec3d_ = NULL;
  return temp;
}

// optional .dtProtoBuf.Vec4d value_vec4d = 20;
inline bool Property::has_value_vec4d() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Property::set_has_value_vec4d() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Property::clear_has_value_vec4d() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Property::clear_value_vec4d() {
  if (value_vec4d_ != NULL) value_vec4d_->::dtProtoBuf::Vec4d::Clear();
  clear_has_value_vec4d();
}
inline const ::dtProtoBuf::Vec4d& Property::value_vec4d() const {
  return value_vec4d_ != NULL ? *value_vec4d_ : *default_instance_->value_vec4d_;
}
inline ::dtProtoBuf::Vec4d* Property::mutable_value_vec4d() {
  set_has_value_vec4d();
  if (value_vec4d_ == NULL) value_vec4d_ = new ::dtProtoBuf::Vec4d;
  return value_vec4d_;
}
inline ::dtProtoBuf::Vec4d* Property::release_value_vec4d() {
  clear_has_value_vec4d();
  ::dtProtoBuf::Vec4d* temp = value_vec4d_;
  value_vec4d_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Message

// required uint32 message_type = 1;
inline bool Message::has_message_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_message_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_message_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_message_type() {
  message_type_ = 0u;
  clear_has_message_type();
}
inline ::google::protobuf::uint32 Message::message_type() const {
  return message_type_;
}
inline void Message::set_message_type(::google::protobuf::uint32 value) {
  set_has_message_type();
  message_type_ = value;
}

// repeated .dtProtoBuf.Property property = 2;
inline int Message::property_size() const {
  return property_.size();
}
inline void Message::clear_property() {
  property_.Clear();
}
inline const ::dtProtoBuf::Property& Message::property(int index) const {
  return property_.Get(index);
}
inline ::dtProtoBuf::Property* Message::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::dtProtoBuf::Property* Message::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >&
Message::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >*
Message::mutable_property() {
  return &property_;
}

// -------------------------------------------------------------------

// Component

// required uint32 component_type = 1;
inline bool Component::has_component_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Component::set_has_component_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Component::clear_has_component_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Component::clear_component_type() {
  component_type_ = 0u;
  clear_has_component_type();
}
inline ::google::protobuf::uint32 Component::component_type() const {
  return component_type_;
}
inline void Component::set_component_type(::google::protobuf::uint32 value) {
  set_has_component_type();
  component_type_ = value;
}

// repeated .dtProtoBuf.Property property = 2;
inline int Component::property_size() const {
  return property_.size();
}
inline void Component::clear_property() {
  property_.Clear();
}
inline const ::dtProtoBuf::Property& Component::property(int index) const {
  return property_.Get(index);
}
inline ::dtProtoBuf::Property* Component::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::dtProtoBuf::Property* Component::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >&
Component::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >*
Component::mutable_property() {
  return &property_;
}

// -------------------------------------------------------------------

// EntitySystem

// required uint32 component_type = 1;
inline bool EntitySystem::has_component_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EntitySystem::set_has_component_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EntitySystem::clear_has_component_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EntitySystem::clear_component_type() {
  component_type_ = 0u;
  clear_has_component_type();
}
inline ::google::protobuf::uint32 EntitySystem::component_type() const {
  return component_type_;
}
inline void EntitySystem::set_component_type(::google::protobuf::uint32 value) {
  set_has_component_type();
  component_type_ = value;
}

// repeated .dtProtoBuf.Property property = 2;
inline int EntitySystem::property_size() const {
  return property_.size();
}
inline void EntitySystem::clear_property() {
  property_.Clear();
}
inline const ::dtProtoBuf::Property& EntitySystem::property(int index) const {
  return property_.Get(index);
}
inline ::dtProtoBuf::Property* EntitySystem::mutable_property(int index) {
  return property_.Mutable(index);
}
inline ::dtProtoBuf::Property* EntitySystem::add_property() {
  return property_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >&
EntitySystem::property() const {
  return property_;
}
inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Property >*
EntitySystem::mutable_property() {
  return &property_;
}

// -------------------------------------------------------------------

// Entity

// optional string spawner = 1;
inline bool Entity::has_spawner() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entity::set_has_spawner() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entity::clear_has_spawner() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entity::clear_spawner() {
  if (spawner_ != &::google::protobuf::internal::kEmptyString) {
    spawner_->clear();
  }
  clear_has_spawner();
}
inline const ::std::string& Entity::spawner() const {
  return *spawner_;
}
inline void Entity::set_spawner(const ::std::string& value) {
  set_has_spawner();
  if (spawner_ == &::google::protobuf::internal::kEmptyString) {
    spawner_ = new ::std::string;
  }
  spawner_->assign(value);
}
inline void Entity::set_spawner(const char* value) {
  set_has_spawner();
  if (spawner_ == &::google::protobuf::internal::kEmptyString) {
    spawner_ = new ::std::string;
  }
  spawner_->assign(value);
}
inline void Entity::set_spawner(const char* value, size_t size) {
  set_has_spawner();
  if (spawner_ == &::google::protobuf::internal::kEmptyString) {
    spawner_ = new ::std::string;
  }
  spawner_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entity::mutable_spawner() {
  set_has_spawner();
  if (spawner_ == &::google::protobuf::internal::kEmptyString) {
    spawner_ = new ::std::string;
  }
  return spawner_;
}
inline ::std::string* Entity::release_spawner() {
  clear_has_spawner();
  if (spawner_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = spawner_;
    spawner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .dtProtoBuf.Component component = 2;
inline int Entity::component_size() const {
  return component_.size();
}
inline void Entity::clear_component() {
  component_.Clear();
}
inline const ::dtProtoBuf::Component& Entity::component(int index) const {
  return component_.Get(index);
}
inline ::dtProtoBuf::Component* Entity::mutable_component(int index) {
  return component_.Mutable(index);
}
inline ::dtProtoBuf::Component* Entity::add_component() {
  return component_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Component >&
Entity::component() const {
  return component_;
}
inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Component >*
Entity::mutable_component() {
  return &component_;
}

// -------------------------------------------------------------------

// Spawner

// repeated .dtProtoBuf.Component component = 1;
inline int Spawner::component_size() const {
  return component_.size();
}
inline void Spawner::clear_component() {
  component_.Clear();
}
inline const ::dtProtoBuf::Component& Spawner::component(int index) const {
  return component_.Get(index);
}
inline ::dtProtoBuf::Component* Spawner::mutable_component(int index) {
  return component_.Mutable(index);
}
inline ::dtProtoBuf::Component* Spawner::add_component() {
  return component_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Component >&
Spawner::component() const {
  return component_;
}
inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Component >*
Spawner::mutable_component() {
  return &component_;
}

// required string name = 2;
inline bool Spawner::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Spawner::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Spawner::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Spawner::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Spawner::name() const {
  return *name_;
}
inline void Spawner::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Spawner::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Spawner::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Spawner::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Spawner::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string parent = 3;
inline bool Spawner::has_parent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Spawner::set_has_parent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Spawner::clear_has_parent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Spawner::clear_parent() {
  if (parent_ != &::google::protobuf::internal::kEmptyString) {
    parent_->clear();
  }
  clear_has_parent();
}
inline const ::std::string& Spawner::parent() const {
  return *parent_;
}
inline void Spawner::set_parent(const ::std::string& value) {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  parent_->assign(value);
}
inline void Spawner::set_parent(const char* value) {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  parent_->assign(value);
}
inline void Spawner::set_parent(const char* value, size_t size) {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  parent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Spawner::mutable_parent() {
  set_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    parent_ = new ::std::string;
  }
  return parent_;
}
inline ::std::string* Spawner::release_parent() {
  clear_has_parent();
  if (parent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parent_;
    parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool addToSpawnerStore = 4;
inline bool Spawner::has_addtospawnerstore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Spawner::set_has_addtospawnerstore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Spawner::clear_has_addtospawnerstore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Spawner::clear_addtospawnerstore() {
  addtospawnerstore_ = false;
  clear_has_addtospawnerstore();
}
inline bool Spawner::addtospawnerstore() const {
  return addtospawnerstore_;
}
inline void Spawner::set_addtospawnerstore(bool value) {
  set_has_addtospawnerstore();
  addtospawnerstore_ = value;
}

// optional string guiCategory = 5;
inline bool Spawner::has_guicategory() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Spawner::set_has_guicategory() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Spawner::clear_has_guicategory() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Spawner::clear_guicategory() {
  if (guicategory_ != &::google::protobuf::internal::kEmptyString) {
    guicategory_->clear();
  }
  clear_has_guicategory();
}
inline const ::std::string& Spawner::guicategory() const {
  return *guicategory_;
}
inline void Spawner::set_guicategory(const ::std::string& value) {
  set_has_guicategory();
  if (guicategory_ == &::google::protobuf::internal::kEmptyString) {
    guicategory_ = new ::std::string;
  }
  guicategory_->assign(value);
}
inline void Spawner::set_guicategory(const char* value) {
  set_has_guicategory();
  if (guicategory_ == &::google::protobuf::internal::kEmptyString) {
    guicategory_ = new ::std::string;
  }
  guicategory_->assign(value);
}
inline void Spawner::set_guicategory(const char* value, size_t size) {
  set_has_guicategory();
  if (guicategory_ == &::google::protobuf::internal::kEmptyString) {
    guicategory_ = new ::std::string;
  }
  guicategory_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Spawner::mutable_guicategory() {
  set_has_guicategory();
  if (guicategory_ == &::google::protobuf::internal::kEmptyString) {
    guicategory_ = new ::std::string;
  }
  return guicategory_;
}
inline ::std::string* Spawner::release_guicategory() {
  clear_has_guicategory();
  if (guicategory_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guicategory_;
    guicategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string iconPath = 6;
inline bool Spawner::has_iconpath() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Spawner::set_has_iconpath() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Spawner::clear_has_iconpath() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Spawner::clear_iconpath() {
  if (iconpath_ != &::google::protobuf::internal::kEmptyString) {
    iconpath_->clear();
  }
  clear_has_iconpath();
}
inline const ::std::string& Spawner::iconpath() const {
  return *iconpath_;
}
inline void Spawner::set_iconpath(const ::std::string& value) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::kEmptyString) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(value);
}
inline void Spawner::set_iconpath(const char* value) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::kEmptyString) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(value);
}
inline void Spawner::set_iconpath(const char* value, size_t size) {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::kEmptyString) {
    iconpath_ = new ::std::string;
  }
  iconpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Spawner::mutable_iconpath() {
  set_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::kEmptyString) {
    iconpath_ = new ::std::string;
  }
  return iconpath_;
}
inline ::std::string* Spawner::release_iconpath() {
  clear_has_iconpath();
  if (iconpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = iconpath_;
    iconpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// Map

// repeated .dtProtoBuf.Spawner spawner = 1;
inline int Map::spawner_size() const {
  return spawner_.size();
}
inline void Map::clear_spawner() {
  spawner_.Clear();
}
inline const ::dtProtoBuf::Spawner& Map::spawner(int index) const {
  return spawner_.Get(index);
}
inline ::dtProtoBuf::Spawner* Map::mutable_spawner(int index) {
  return spawner_.Mutable(index);
}
inline ::dtProtoBuf::Spawner* Map::add_spawner() {
  return spawner_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Spawner >&
Map::spawner() const {
  return spawner_;
}
inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Spawner >*
Map::mutable_spawner() {
  return &spawner_;
}

// repeated .dtProtoBuf.Entity entity = 2;
inline int Map::entity_size() const {
  return entity_.size();
}
inline void Map::clear_entity() {
  entity_.Clear();
}
inline const ::dtProtoBuf::Entity& Map::entity(int index) const {
  return entity_.Get(index);
}
inline ::dtProtoBuf::Entity* Map::mutable_entity(int index) {
  return entity_.Mutable(index);
}
inline ::dtProtoBuf::Entity* Map::add_entity() {
  return entity_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Entity >&
Map::entity() const {
  return entity_;
}
inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::Entity >*
Map::mutable_entity() {
  return &entity_;
}

// -------------------------------------------------------------------

// Scene

// repeated string libraries = 1;
inline int Scene::libraries_size() const {
  return libraries_.size();
}
inline void Scene::clear_libraries() {
  libraries_.Clear();
}
inline const ::std::string& Scene::libraries(int index) const {
  return libraries_.Get(index);
}
inline ::std::string* Scene::mutable_libraries(int index) {
  return libraries_.Mutable(index);
}
inline void Scene::set_libraries(int index, const ::std::string& value) {
  libraries_.Mutable(index)->assign(value);
}
inline void Scene::set_libraries(int index, const char* value) {
  libraries_.Mutable(index)->assign(value);
}
inline void Scene::set_libraries(int index, const char* value, size_t size) {
  libraries_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Scene::add_libraries() {
  return libraries_.Add();
}
inline void Scene::add_libraries(const ::std::string& value) {
  libraries_.Add()->assign(value);
}
inline void Scene::add_libraries(const char* value) {
  libraries_.Add()->assign(value);
}
inline void Scene::add_libraries(const char* value, size_t size) {
  libraries_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Scene::libraries() const {
  return libraries_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Scene::mutable_libraries() {
  return &libraries_;
}

// repeated .dtProtoBuf.EntitySystem entitysystem = 2;
inline int Scene::entitysystem_size() const {
  return entitysystem_.size();
}
inline void Scene::clear_entitysystem() {
  entitysystem_.Clear();
}
inline const ::dtProtoBuf::EntitySystem& Scene::entitysystem(int index) const {
  return entitysystem_.Get(index);
}
inline ::dtProtoBuf::EntitySystem* Scene::mutable_entitysystem(int index) {
  return entitysystem_.Mutable(index);
}
inline ::dtProtoBuf::EntitySystem* Scene::add_entitysystem() {
  return entitysystem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::EntitySystem >&
Scene::entitysystem() const {
  return entitysystem_;
}
inline ::google::protobuf::RepeatedPtrField< ::dtProtoBuf::EntitySystem >*
Scene::mutable_entitysystem() {
  return &entitysystem_;
}

// repeated string map = 3;
inline int Scene::map_size() const {
  return map_.size();
}
inline void Scene::clear_map() {
  map_.Clear();
}
inline const ::std::string& Scene::map(int index) const {
  return map_.Get(index);
}
inline ::std::string* Scene::mutable_map(int index) {
  return map_.Mutable(index);
}
inline void Scene::set_map(int index, const ::std::string& value) {
  map_.Mutable(index)->assign(value);
}
inline void Scene::set_map(int index, const char* value) {
  map_.Mutable(index)->assign(value);
}
inline void Scene::set_map(int index, const char* value, size_t size) {
  map_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Scene::add_map() {
  return map_.Add();
}
inline void Scene::add_map(const ::std::string& value) {
  map_.Add()->assign(value);
}
inline void Scene::add_map(const char* value) {
  map_.Add()->assign(value);
}
inline void Scene::add_map(const char* value, size_t size) {
  map_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Scene::map() const {
  return map_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Scene::mutable_map() {
  return &map_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dtProtoBuf

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< dtProtoBuf::PropertyType>() {
  return dtProtoBuf::PropertyType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2eproto__INCLUDED
