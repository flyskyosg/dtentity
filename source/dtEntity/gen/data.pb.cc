// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dtProtoBuf {

namespace {

const ::google::protobuf::Descriptor* Vec2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec4_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec4_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec2d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec2d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vec4d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vec4d_reflection_ = NULL;
const ::google::protobuf::Descriptor* Quat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Quat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Matrix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Matrix_reflection_ = NULL;
const ::google::protobuf::Descriptor* Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* Message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Message_reflection_ = NULL;
const ::google::protobuf::Descriptor* Component_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Component_reflection_ = NULL;
const ::google::protobuf::Descriptor* EntitySystem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EntitySystem_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Spawner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Spawner_reflection_ = NULL;
const ::google::protobuf::Descriptor* Map_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Map_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scene_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PropertyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2eproto() {
  protobuf_AddDesc_data_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data.proto");
  GOOGLE_CHECK(file != NULL);
  Vec2_descriptor_ = file->message_type(0);
  static const int Vec2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, value_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, value_1_),
  };
  Vec2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec2_descriptor_,
      Vec2::default_instance_,
      Vec2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec2));
  Vec3_descriptor_ = file->message_type(1);
  static const int Vec3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, value_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, value_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, value_2_),
  };
  Vec3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec3_descriptor_,
      Vec3::default_instance_,
      Vec3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec3));
  Vec4_descriptor_ = file->message_type(2);
  static const int Vec4_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, value_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, value_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, value_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, value_3_),
  };
  Vec4_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec4_descriptor_,
      Vec4::default_instance_,
      Vec4_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec4));
  Vec2d_descriptor_ = file->message_type(3);
  static const int Vec2d_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2d, value_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2d, value_1_),
  };
  Vec2d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec2d_descriptor_,
      Vec2d::default_instance_,
      Vec2d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec2d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec2d));
  Vec3d_descriptor_ = file->message_type(4);
  static const int Vec3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3d, value_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3d, value_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3d, value_2_),
  };
  Vec3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec3d_descriptor_,
      Vec3d::default_instance_,
      Vec3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec3d));
  Vec4d_descriptor_ = file->message_type(5);
  static const int Vec4d_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4d, value_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4d, value_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4d, value_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4d, value_3_),
  };
  Vec4d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vec4d_descriptor_,
      Vec4d::default_instance_,
      Vec4d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vec4d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vec4d));
  Quat_descriptor_ = file->message_type(6);
  static const int Quat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quat, value_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quat, value_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quat, value_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quat, value_3_),
  };
  Quat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Quat_descriptor_,
      Quat::default_instance_,
      Quat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Quat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Quat));
  Matrix_descriptor_ = file->message_type(7);
  static const int Matrix_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_10_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_11_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_12_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_13_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_14_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, value_15_),
  };
  Matrix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Matrix_descriptor_,
      Matrix::default_instance_,
      Matrix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Matrix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Matrix));
  Property_descriptor_ = file->message_type(8);
  static const int Property_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, property_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_array_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_char_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_float_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, property_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_int_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_quat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_stringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_uint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_vec2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_vec3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_vec4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_vec2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_vec3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_vec4d_),
  };
  Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Property_descriptor_,
      Property::default_instance_,
      Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Property));
  Message_descriptor_ = file->message_type(9);
  static const int Message_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, property_),
  };
  Message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Message_descriptor_,
      Message::default_instance_,
      Message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Message));
  Component_descriptor_ = file->message_type(10);
  static const int Component_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, component_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, property_),
  };
  Component_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Component_descriptor_,
      Component::default_instance_,
      Component_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Component));
  EntitySystem_descriptor_ = file->message_type(11);
  static const int EntitySystem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySystem, component_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySystem, property_),
  };
  EntitySystem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EntitySystem_descriptor_,
      EntitySystem::default_instance_,
      EntitySystem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySystem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EntitySystem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EntitySystem));
  Entity_descriptor_ = file->message_type(12);
  static const int Entity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, spawner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, component_),
  };
  Entity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Entity_descriptor_,
      Entity::default_instance_,
      Entity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Entity));
  Spawner_descriptor_ = file->message_type(13);
  static const int Spawner_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawner, component_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawner, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawner, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawner, addtospawnerstore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawner, guicategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawner, iconpath_),
  };
  Spawner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Spawner_descriptor_,
      Spawner::default_instance_,
      Spawner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Spawner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Spawner));
  Map_descriptor_ = file->message_type(14);
  static const int Map_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, spawner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, entity_),
  };
  Map_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Map_descriptor_,
      Map::default_instance_,
      Map_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Map, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Map));
  Scene_descriptor_ = file->message_type(15);
  static const int Scene_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, libraries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, entitysystem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, map_),
  };
  Scene_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scene_descriptor_,
      Scene::default_instance_,
      Scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scene));
  PropertyType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec2_descriptor_, &Vec2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec3_descriptor_, &Vec3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec4_descriptor_, &Vec4::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec2d_descriptor_, &Vec2d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec3d_descriptor_, &Vec3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vec4d_descriptor_, &Vec4d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Quat_descriptor_, &Quat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Matrix_descriptor_, &Matrix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Property_descriptor_, &Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Message_descriptor_, &Message::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Component_descriptor_, &Component::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EntitySystem_descriptor_, &EntitySystem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Entity_descriptor_, &Entity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Spawner_descriptor_, &Spawner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Map_descriptor_, &Map::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scene_descriptor_, &Scene::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2eproto() {
  delete Vec2::default_instance_;
  delete Vec2_reflection_;
  delete Vec3::default_instance_;
  delete Vec3_reflection_;
  delete Vec4::default_instance_;
  delete Vec4_reflection_;
  delete Vec2d::default_instance_;
  delete Vec2d_reflection_;
  delete Vec3d::default_instance_;
  delete Vec3d_reflection_;
  delete Vec4d::default_instance_;
  delete Vec4d_reflection_;
  delete Quat::default_instance_;
  delete Quat_reflection_;
  delete Matrix::default_instance_;
  delete Matrix_reflection_;
  delete Property::default_instance_;
  delete Property_reflection_;
  delete Message::default_instance_;
  delete Message_reflection_;
  delete Component::default_instance_;
  delete Component_reflection_;
  delete EntitySystem::default_instance_;
  delete EntitySystem_reflection_;
  delete Entity::default_instance_;
  delete Entity_reflection_;
  delete Spawner::default_instance_;
  delete Spawner_reflection_;
  delete Map::default_instance_;
  delete Map_reflection_;
  delete Scene::default_instance_;
  delete Scene_reflection_;
}

void protobuf_AddDesc_data_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndata.proto\022\ndtProtoBuf\"(\n\004Vec2\022\017\n\007valu"
    "e_0\030\001 \002(\002\022\017\n\007value_1\030\002 \002(\002\"9\n\004Vec3\022\017\n\007va"
    "lue_0\030\001 \002(\002\022\017\n\007value_1\030\002 \002(\002\022\017\n\007value_2\030"
    "\003 \002(\002\"J\n\004Vec4\022\017\n\007value_0\030\001 \002(\002\022\017\n\007value_"
    "1\030\002 \002(\002\022\017\n\007value_2\030\003 \002(\002\022\017\n\007value_3\030\004 \002("
    "\002\")\n\005Vec2d\022\017\n\007value_0\030\001 \002(\001\022\017\n\007value_1\030\002"
    " \002(\001\":\n\005Vec3d\022\017\n\007value_0\030\001 \002(\001\022\017\n\007value_"
    "1\030\002 \002(\001\022\017\n\007value_2\030\003 \002(\001\"K\n\005Vec4d\022\017\n\007val"
    "ue_0\030\001 \002(\001\022\017\n\007value_1\030\002 \002(\001\022\017\n\007value_2\030\003"
    " \002(\001\022\017\n\007value_3\030\004 \002(\001\"J\n\004Quat\022\017\n\007value_0"
    "\030\001 \002(\001\022\017\n\007value_1\030\002 \002(\001\022\017\n\007value_2\030\003 \002(\001"
    "\022\017\n\007value_3\030\004 \002(\001\"\236\002\n\006Matrix\022\017\n\007value_0\030"
    "\001 \002(\001\022\017\n\007value_1\030\002 \002(\001\022\017\n\007value_2\030\003 \002(\001\022"
    "\017\n\007value_3\030\004 \002(\001\022\017\n\007value_4\030\005 \002(\001\022\017\n\007val"
    "ue_5\030\006 \002(\001\022\017\n\007value_6\030\007 \002(\001\022\017\n\007value_7\030\010"
    " \002(\001\022\017\n\007value_8\030\t \002(\001\022\017\n\007value_9\030\n \002(\001\022\020"
    "\n\010value_10\030\013 \002(\001\022\020\n\010value_11\030\014 \002(\001\022\020\n\010va"
    "lue_12\030\r \002(\001\022\020\n\010value_13\030\016 \002(\001\022\020\n\010value_"
    "14\030\017 \002(\001\022\020\n\010value_15\030\020 \002(\001\"\212\005\n\010Property\022"
    ",\n\004type\030\001 \001(\0162\030.dtProtoBuf.PropertyType:"
    "\004NONE\022\025\n\rproperty_name\030\002 \002(\r\022)\n\013value_ar"
    "ray\030\003 \003(\0132\024.dtProtoBuf.Property\022\022\n\nvalue"
    "_bool\030\004 \001(\010\022\022\n\nvalue_char\030\005 \001(\005\022\024\n\014value"
    "_double\030\006 \001(\001\022\023\n\013value_float\030\007 \001(\002\022,\n\016pr"
    "operty_value\030\010 \001(\0132\024.dtProtoBuf.Property"
    "\022\021\n\tvalue_int\030\t \001(\005\022(\n\014value_matrix\030\n \001("
    "\0132\022.dtProtoBuf.Matrix\022$\n\nvalue_quat\030\013 \001("
    "\0132\020.dtProtoBuf.Quat\022\024\n\014value_string\030\014 \001("
    "\t\022\026\n\016value_stringid\030\r \001(\r\022\022\n\nvalue_uint\030"
    "\016 \001(\r\022$\n\nvalue_vec2\030\017 \001(\0132\020.dtProtoBuf.V"
    "ec2\022$\n\nvalue_vec3\030\020 \001(\0132\020.dtProtoBuf.Vec"
    "3\022$\n\nvalue_vec4\030\021 \001(\0132\020.dtProtoBuf.Vec4\022"
    "&\n\013value_vec2d\030\022 \001(\0132\021.dtProtoBuf.Vec2d\022"
    "&\n\013value_vec3d\030\023 \001(\0132\021.dtProtoBuf.Vec3d\022"
    "&\n\013value_vec4d\030\024 \001(\0132\021.dtProtoBuf.Vec4d\""
    "G\n\007Message\022\024\n\014message_type\030\001 \002(\r\022&\n\010prop"
    "erty\030\002 \003(\0132\024.dtProtoBuf.Property\"K\n\tComp"
    "onent\022\026\n\016component_type\030\001 \002(\r\022&\n\010propert"
    "y\030\002 \003(\0132\024.dtProtoBuf.Property\"N\n\014EntityS"
    "ystem\022\026\n\016component_type\030\001 \002(\r\022&\n\010propert"
    "y\030\002 \003(\0132\024.dtProtoBuf.Property\"C\n\006Entity\022"
    "\017\n\007spawner\030\001 \001(\t\022(\n\tcomponent\030\002 \003(\0132\025.dt"
    "ProtoBuf.Component\"\223\001\n\007Spawner\022(\n\tcompon"
    "ent\030\001 \003(\0132\025.dtProtoBuf.Component\022\014\n\004name"
    "\030\002 \002(\t\022\016\n\006parent\030\003 \001(\t\022\031\n\021addToSpawnerSt"
    "ore\030\004 \001(\010\022\023\n\013guiCategory\030\005 \001(\t\022\020\n\010iconPa"
    "th\030\006 \001(\t\"O\n\003Map\022$\n\007spawner\030\001 \003(\0132\023.dtPro"
    "toBuf.Spawner\022\"\n\006entity\030\002 \003(\0132\022.dtProtoB"
    "uf.Entity\"W\n\005Scene\022\021\n\tlibraries\030\001 \003(\t\022.\n"
    "\014entitysystem\030\002 \003(\0132\030.dtProtoBuf.EntityS"
    "ystem\022\013\n\003map\030\003 \003(\t*\333\001\n\014PropertyType\022\010\n\004N"
    "ONE\020\000\022\t\n\005ARRAY\020\001\022\010\n\004BOOL\020\002\022\010\n\004CHAR\020\003\022\n\n\006"
    "DOUBLE\020\004\022\t\n\005FLOAT\020\005\022\t\n\005GROUP\020\006\022\007\n\003INT\020\007\022"
    "\n\n\006MATRIX\020\010\022\010\n\004QUAT\020\t\022\n\n\006STRING\020\n\022\014\n\010STR"
    "INGID\020\013\022\010\n\004UINT\020\014\022\010\n\004VEC2\020\r\022\010\n\004VEC3\020\016\022\010\n"
    "\004VEC4\020\017\022\t\n\005VEC2D\020\020\022\t\n\005VEC3D\020\021\022\t\n\005VEC4D\020\022", 2240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data.proto", &protobuf_RegisterTypes);
  Vec2::default_instance_ = new Vec2();
  Vec3::default_instance_ = new Vec3();
  Vec4::default_instance_ = new Vec4();
  Vec2d::default_instance_ = new Vec2d();
  Vec3d::default_instance_ = new Vec3d();
  Vec4d::default_instance_ = new Vec4d();
  Quat::default_instance_ = new Quat();
  Matrix::default_instance_ = new Matrix();
  Property::default_instance_ = new Property();
  Message::default_instance_ = new Message();
  Component::default_instance_ = new Component();
  EntitySystem::default_instance_ = new EntitySystem();
  Entity::default_instance_ = new Entity();
  Spawner::default_instance_ = new Spawner();
  Map::default_instance_ = new Map();
  Scene::default_instance_ = new Scene();
  Vec2::default_instance_->InitAsDefaultInstance();
  Vec3::default_instance_->InitAsDefaultInstance();
  Vec4::default_instance_->InitAsDefaultInstance();
  Vec2d::default_instance_->InitAsDefaultInstance();
  Vec3d::default_instance_->InitAsDefaultInstance();
  Vec4d::default_instance_->InitAsDefaultInstance();
  Quat::default_instance_->InitAsDefaultInstance();
  Matrix::default_instance_->InitAsDefaultInstance();
  Property::default_instance_->InitAsDefaultInstance();
  Message::default_instance_->InitAsDefaultInstance();
  Component::default_instance_->InitAsDefaultInstance();
  EntitySystem::default_instance_->InitAsDefaultInstance();
  Entity::default_instance_->InitAsDefaultInstance();
  Spawner::default_instance_->InitAsDefaultInstance();
  Map::default_instance_->InitAsDefaultInstance();
  Scene::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2eproto {
  StaticDescriptorInitializer_data_2eproto() {
    protobuf_AddDesc_data_2eproto();
  }
} static_descriptor_initializer_data_2eproto_;

const ::google::protobuf::EnumDescriptor* PropertyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PropertyType_descriptor_;
}
bool PropertyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Vec2::kValue0FieldNumber;
const int Vec2::kValue1FieldNumber;
#endif  // !_MSC_VER

Vec2::Vec2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vec2::InitAsDefaultInstance() {
}

Vec2::Vec2(const Vec2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vec2::SharedCtor() {
  _cached_size_ = 0;
  value_0_ = 0;
  value_1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec2::~Vec2() {
  SharedDtor();
}

void Vec2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec2_descriptor_;
}

const Vec2& Vec2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Vec2* Vec2::default_instance_ = NULL;

Vec2* Vec2::New() const {
  return new Vec2;
}

void Vec2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_0_ = 0;
    value_1_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float value_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_0_)));
          set_has_value_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value_1;
        break;
      }
      
      // required float value_1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_1_)));
          set_has_value_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float value_0 = 1;
  if (has_value_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value_0(), output);
  }
  
  // required float value_1 = 2;
  if (has_value_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value_1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float value_0 = 1;
  if (has_value_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value_0(), target);
  }
  
  // required float value_1 = 2;
  if (has_value_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value_1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float value_0 = 1;
    if (has_value_0()) {
      total_size += 1 + 4;
    }
    
    // required float value_1 = 2;
    if (has_value_1()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec2::MergeFrom(const Vec2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value_0()) {
      set_value_0(from.value_0());
    }
    if (from.has_value_1()) {
      set_value_1(from.value_1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2::CopyFrom(const Vec2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Vec2::Swap(Vec2* other) {
  if (other != this) {
    std::swap(value_0_, other->value_0_);
    std::swap(value_1_, other->value_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec2_descriptor_;
  metadata.reflection = Vec2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec3::kValue0FieldNumber;
const int Vec3::kValue1FieldNumber;
const int Vec3::kValue2FieldNumber;
#endif  // !_MSC_VER

Vec3::Vec3()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vec3::InitAsDefaultInstance() {
}

Vec3::Vec3(const Vec3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vec3::SharedCtor() {
  _cached_size_ = 0;
  value_0_ = 0;
  value_1_ = 0;
  value_2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec3::~Vec3() {
  SharedDtor();
}

void Vec3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec3_descriptor_;
}

const Vec3& Vec3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Vec3* Vec3::default_instance_ = NULL;

Vec3* Vec3::New() const {
  return new Vec3;
}

void Vec3::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_0_ = 0;
    value_1_ = 0;
    value_2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float value_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_0_)));
          set_has_value_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value_1;
        break;
      }
      
      // required float value_1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_1_)));
          set_has_value_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_value_2;
        break;
      }
      
      // required float value_2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_2_)));
          set_has_value_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float value_0 = 1;
  if (has_value_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value_0(), output);
  }
  
  // required float value_1 = 2;
  if (has_value_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value_1(), output);
  }
  
  // required float value_2 = 3;
  if (has_value_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value_2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float value_0 = 1;
  if (has_value_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value_0(), target);
  }
  
  // required float value_1 = 2;
  if (has_value_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value_1(), target);
  }
  
  // required float value_2 = 3;
  if (has_value_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value_2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec3::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float value_0 = 1;
    if (has_value_0()) {
      total_size += 1 + 4;
    }
    
    // required float value_1 = 2;
    if (has_value_1()) {
      total_size += 1 + 4;
    }
    
    // required float value_2 = 3;
    if (has_value_2()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec3::MergeFrom(const Vec3& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value_0()) {
      set_value_0(from.value_0());
    }
    if (from.has_value_1()) {
      set_value_1(from.value_1());
    }
    if (from.has_value_2()) {
      set_value_2(from.value_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3::CopyFrom(const Vec3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Vec3::Swap(Vec3* other) {
  if (other != this) {
    std::swap(value_0_, other->value_0_);
    std::swap(value_1_, other->value_1_);
    std::swap(value_2_, other->value_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec3_descriptor_;
  metadata.reflection = Vec3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec4::kValue0FieldNumber;
const int Vec4::kValue1FieldNumber;
const int Vec4::kValue2FieldNumber;
const int Vec4::kValue3FieldNumber;
#endif  // !_MSC_VER

Vec4::Vec4()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vec4::InitAsDefaultInstance() {
}

Vec4::Vec4(const Vec4& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vec4::SharedCtor() {
  _cached_size_ = 0;
  value_0_ = 0;
  value_1_ = 0;
  value_2_ = 0;
  value_3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec4::~Vec4() {
  SharedDtor();
}

void Vec4::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec4::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec4_descriptor_;
}

const Vec4& Vec4::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Vec4* Vec4::default_instance_ = NULL;

Vec4* Vec4::New() const {
  return new Vec4;
}

void Vec4::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_0_ = 0;
    value_1_ = 0;
    value_2_ = 0;
    value_3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float value_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_0_)));
          set_has_value_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value_1;
        break;
      }
      
      // required float value_1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_1_)));
          set_has_value_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_value_2;
        break;
      }
      
      // required float value_2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_2_)));
          set_has_value_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_value_3;
        break;
      }
      
      // required float value_3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_3_)));
          set_has_value_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float value_0 = 1;
  if (has_value_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->value_0(), output);
  }
  
  // required float value_1 = 2;
  if (has_value_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value_1(), output);
  }
  
  // required float value_2 = 3;
  if (has_value_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value_2(), output);
  }
  
  // required float value_3 = 4;
  if (has_value_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value_3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec4::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float value_0 = 1;
  if (has_value_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->value_0(), target);
  }
  
  // required float value_1 = 2;
  if (has_value_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value_1(), target);
  }
  
  // required float value_2 = 3;
  if (has_value_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value_2(), target);
  }
  
  // required float value_3 = 4;
  if (has_value_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->value_3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec4::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float value_0 = 1;
    if (has_value_0()) {
      total_size += 1 + 4;
    }
    
    // required float value_1 = 2;
    if (has_value_1()) {
      total_size += 1 + 4;
    }
    
    // required float value_2 = 3;
    if (has_value_2()) {
      total_size += 1 + 4;
    }
    
    // required float value_3 = 4;
    if (has_value_3()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec4::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec4* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec4*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec4::MergeFrom(const Vec4& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value_0()) {
      set_value_0(from.value_0());
    }
    if (from.has_value_1()) {
      set_value_1(from.value_1());
    }
    if (from.has_value_2()) {
      set_value_2(from.value_2());
    }
    if (from.has_value_3()) {
      set_value_3(from.value_3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec4::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec4::CopyFrom(const Vec4& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec4::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Vec4::Swap(Vec4* other) {
  if (other != this) {
    std::swap(value_0_, other->value_0_);
    std::swap(value_1_, other->value_1_);
    std::swap(value_2_, other->value_2_);
    std::swap(value_3_, other->value_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec4::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec4_descriptor_;
  metadata.reflection = Vec4_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec2d::kValue0FieldNumber;
const int Vec2d::kValue1FieldNumber;
#endif  // !_MSC_VER

Vec2d::Vec2d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vec2d::InitAsDefaultInstance() {
}

Vec2d::Vec2d(const Vec2d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vec2d::SharedCtor() {
  _cached_size_ = 0;
  value_0_ = 0;
  value_1_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec2d::~Vec2d() {
  SharedDtor();
}

void Vec2d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec2d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec2d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec2d_descriptor_;
}

const Vec2d& Vec2d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Vec2d* Vec2d::default_instance_ = NULL;

Vec2d* Vec2d::New() const {
  return new Vec2d;
}

void Vec2d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_0_ = 0;
    value_1_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec2d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double value_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_0_)));
          set_has_value_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value_1;
        break;
      }
      
      // required double value_1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_1_)));
          set_has_value_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec2d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double value_0 = 1;
  if (has_value_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value_0(), output);
  }
  
  // required double value_1 = 2;
  if (has_value_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value_1(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec2d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double value_0 = 1;
  if (has_value_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value_0(), target);
  }
  
  // required double value_1 = 2;
  if (has_value_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value_1(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec2d::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double value_0 = 1;
    if (has_value_0()) {
      total_size += 1 + 8;
    }
    
    // required double value_1 = 2;
    if (has_value_1()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec2d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec2d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec2d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec2d::MergeFrom(const Vec2d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value_0()) {
      set_value_0(from.value_0());
    }
    if (from.has_value_1()) {
      set_value_1(from.value_1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec2d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec2d::CopyFrom(const Vec2d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec2d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Vec2d::Swap(Vec2d* other) {
  if (other != this) {
    std::swap(value_0_, other->value_0_);
    std::swap(value_1_, other->value_1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec2d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec2d_descriptor_;
  metadata.reflection = Vec2d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec3d::kValue0FieldNumber;
const int Vec3d::kValue1FieldNumber;
const int Vec3d::kValue2FieldNumber;
#endif  // !_MSC_VER

Vec3d::Vec3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vec3d::InitAsDefaultInstance() {
}

Vec3d::Vec3d(const Vec3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vec3d::SharedCtor() {
  _cached_size_ = 0;
  value_0_ = 0;
  value_1_ = 0;
  value_2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec3d::~Vec3d() {
  SharedDtor();
}

void Vec3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec3d_descriptor_;
}

const Vec3d& Vec3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Vec3d* Vec3d::default_instance_ = NULL;

Vec3d* Vec3d::New() const {
  return new Vec3d;
}

void Vec3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_0_ = 0;
    value_1_ = 0;
    value_2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double value_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_0_)));
          set_has_value_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value_1;
        break;
      }
      
      // required double value_1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_1_)));
          set_has_value_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_value_2;
        break;
      }
      
      // required double value_2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_2_)));
          set_has_value_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double value_0 = 1;
  if (has_value_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value_0(), output);
  }
  
  // required double value_1 = 2;
  if (has_value_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value_1(), output);
  }
  
  // required double value_2 = 3;
  if (has_value_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value_2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double value_0 = 1;
  if (has_value_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value_0(), target);
  }
  
  // required double value_1 = 2;
  if (has_value_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value_1(), target);
  }
  
  // required double value_2 = 3;
  if (has_value_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value_2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec3d::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double value_0 = 1;
    if (has_value_0()) {
      total_size += 1 + 8;
    }
    
    // required double value_1 = 2;
    if (has_value_1()) {
      total_size += 1 + 8;
    }
    
    // required double value_2 = 3;
    if (has_value_2()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec3d::MergeFrom(const Vec3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value_0()) {
      set_value_0(from.value_0());
    }
    if (from.has_value_1()) {
      set_value_1(from.value_1());
    }
    if (from.has_value_2()) {
      set_value_2(from.value_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec3d::CopyFrom(const Vec3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Vec3d::Swap(Vec3d* other) {
  if (other != this) {
    std::swap(value_0_, other->value_0_);
    std::swap(value_1_, other->value_1_);
    std::swap(value_2_, other->value_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec3d_descriptor_;
  metadata.reflection = Vec3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vec4d::kValue0FieldNumber;
const int Vec4d::kValue1FieldNumber;
const int Vec4d::kValue2FieldNumber;
const int Vec4d::kValue3FieldNumber;
#endif  // !_MSC_VER

Vec4d::Vec4d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vec4d::InitAsDefaultInstance() {
}

Vec4d::Vec4d(const Vec4d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vec4d::SharedCtor() {
  _cached_size_ = 0;
  value_0_ = 0;
  value_1_ = 0;
  value_2_ = 0;
  value_3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vec4d::~Vec4d() {
  SharedDtor();
}

void Vec4d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vec4d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vec4d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vec4d_descriptor_;
}

const Vec4d& Vec4d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Vec4d* Vec4d::default_instance_ = NULL;

Vec4d* Vec4d::New() const {
  return new Vec4d;
}

void Vec4d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_0_ = 0;
    value_1_ = 0;
    value_2_ = 0;
    value_3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vec4d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double value_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_0_)));
          set_has_value_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value_1;
        break;
      }
      
      // required double value_1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_1_)));
          set_has_value_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_value_2;
        break;
      }
      
      // required double value_2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_2_)));
          set_has_value_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_value_3;
        break;
      }
      
      // required double value_3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_3_)));
          set_has_value_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vec4d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double value_0 = 1;
  if (has_value_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value_0(), output);
  }
  
  // required double value_1 = 2;
  if (has_value_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value_1(), output);
  }
  
  // required double value_2 = 3;
  if (has_value_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value_2(), output);
  }
  
  // required double value_3 = 4;
  if (has_value_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->value_3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vec4d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double value_0 = 1;
  if (has_value_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value_0(), target);
  }
  
  // required double value_1 = 2;
  if (has_value_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value_1(), target);
  }
  
  // required double value_2 = 3;
  if (has_value_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value_2(), target);
  }
  
  // required double value_3 = 4;
  if (has_value_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->value_3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vec4d::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double value_0 = 1;
    if (has_value_0()) {
      total_size += 1 + 8;
    }
    
    // required double value_1 = 2;
    if (has_value_1()) {
      total_size += 1 + 8;
    }
    
    // required double value_2 = 3;
    if (has_value_2()) {
      total_size += 1 + 8;
    }
    
    // required double value_3 = 4;
    if (has_value_3()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vec4d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vec4d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vec4d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vec4d::MergeFrom(const Vec4d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value_0()) {
      set_value_0(from.value_0());
    }
    if (from.has_value_1()) {
      set_value_1(from.value_1());
    }
    if (from.has_value_2()) {
      set_value_2(from.value_2());
    }
    if (from.has_value_3()) {
      set_value_3(from.value_3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vec4d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vec4d::CopyFrom(const Vec4d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vec4d::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Vec4d::Swap(Vec4d* other) {
  if (other != this) {
    std::swap(value_0_, other->value_0_);
    std::swap(value_1_, other->value_1_);
    std::swap(value_2_, other->value_2_);
    std::swap(value_3_, other->value_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vec4d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vec4d_descriptor_;
  metadata.reflection = Vec4d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Quat::kValue0FieldNumber;
const int Quat::kValue1FieldNumber;
const int Quat::kValue2FieldNumber;
const int Quat::kValue3FieldNumber;
#endif  // !_MSC_VER

Quat::Quat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Quat::InitAsDefaultInstance() {
}

Quat::Quat(const Quat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Quat::SharedCtor() {
  _cached_size_ = 0;
  value_0_ = 0;
  value_1_ = 0;
  value_2_ = 0;
  value_3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Quat::~Quat() {
  SharedDtor();
}

void Quat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Quat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Quat_descriptor_;
}

const Quat& Quat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Quat* Quat::default_instance_ = NULL;

Quat* Quat::New() const {
  return new Quat;
}

void Quat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_0_ = 0;
    value_1_ = 0;
    value_2_ = 0;
    value_3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Quat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double value_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_0_)));
          set_has_value_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value_1;
        break;
      }
      
      // required double value_1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_1_)));
          set_has_value_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_value_2;
        break;
      }
      
      // required double value_2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_2_)));
          set_has_value_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_value_3;
        break;
      }
      
      // required double value_3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_3_)));
          set_has_value_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Quat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double value_0 = 1;
  if (has_value_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value_0(), output);
  }
  
  // required double value_1 = 2;
  if (has_value_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value_1(), output);
  }
  
  // required double value_2 = 3;
  if (has_value_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value_2(), output);
  }
  
  // required double value_3 = 4;
  if (has_value_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->value_3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Quat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double value_0 = 1;
  if (has_value_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value_0(), target);
  }
  
  // required double value_1 = 2;
  if (has_value_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value_1(), target);
  }
  
  // required double value_2 = 3;
  if (has_value_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value_2(), target);
  }
  
  // required double value_3 = 4;
  if (has_value_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->value_3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Quat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double value_0 = 1;
    if (has_value_0()) {
      total_size += 1 + 8;
    }
    
    // required double value_1 = 2;
    if (has_value_1()) {
      total_size += 1 + 8;
    }
    
    // required double value_2 = 3;
    if (has_value_2()) {
      total_size += 1 + 8;
    }
    
    // required double value_3 = 4;
    if (has_value_3()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Quat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Quat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Quat::MergeFrom(const Quat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value_0()) {
      set_value_0(from.value_0());
    }
    if (from.has_value_1()) {
      set_value_1(from.value_1());
    }
    if (from.has_value_2()) {
      set_value_2(from.value_2());
    }
    if (from.has_value_3()) {
      set_value_3(from.value_3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Quat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quat::CopyFrom(const Quat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Quat::Swap(Quat* other) {
  if (other != this) {
    std::swap(value_0_, other->value_0_);
    std::swap(value_1_, other->value_1_);
    std::swap(value_2_, other->value_2_);
    std::swap(value_3_, other->value_3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Quat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Quat_descriptor_;
  metadata.reflection = Quat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Matrix::kValue0FieldNumber;
const int Matrix::kValue1FieldNumber;
const int Matrix::kValue2FieldNumber;
const int Matrix::kValue3FieldNumber;
const int Matrix::kValue4FieldNumber;
const int Matrix::kValue5FieldNumber;
const int Matrix::kValue6FieldNumber;
const int Matrix::kValue7FieldNumber;
const int Matrix::kValue8FieldNumber;
const int Matrix::kValue9FieldNumber;
const int Matrix::kValue10FieldNumber;
const int Matrix::kValue11FieldNumber;
const int Matrix::kValue12FieldNumber;
const int Matrix::kValue13FieldNumber;
const int Matrix::kValue14FieldNumber;
const int Matrix::kValue15FieldNumber;
#endif  // !_MSC_VER

Matrix::Matrix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Matrix::InitAsDefaultInstance() {
}

Matrix::Matrix(const Matrix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Matrix::SharedCtor() {
  _cached_size_ = 0;
  value_0_ = 0;
  value_1_ = 0;
  value_2_ = 0;
  value_3_ = 0;
  value_4_ = 0;
  value_5_ = 0;
  value_6_ = 0;
  value_7_ = 0;
  value_8_ = 0;
  value_9_ = 0;
  value_10_ = 0;
  value_11_ = 0;
  value_12_ = 0;
  value_13_ = 0;
  value_14_ = 0;
  value_15_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Matrix::~Matrix() {
  SharedDtor();
}

void Matrix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Matrix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matrix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Matrix_descriptor_;
}

const Matrix& Matrix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Matrix* Matrix::default_instance_ = NULL;

Matrix* Matrix::New() const {
  return new Matrix;
}

void Matrix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_0_ = 0;
    value_1_ = 0;
    value_2_ = 0;
    value_3_ = 0;
    value_4_ = 0;
    value_5_ = 0;
    value_6_ = 0;
    value_7_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    value_8_ = 0;
    value_9_ = 0;
    value_10_ = 0;
    value_11_ = 0;
    value_12_ = 0;
    value_13_ = 0;
    value_14_ = 0;
    value_15_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Matrix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double value_0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_0_)));
          set_has_value_0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value_1;
        break;
      }
      
      // required double value_1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_1_)));
          set_has_value_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_value_2;
        break;
      }
      
      // required double value_2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_2_)));
          set_has_value_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_value_3;
        break;
      }
      
      // required double value_3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_3_)));
          set_has_value_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_value_4;
        break;
      }
      
      // required double value_4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_4_)));
          set_has_value_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_value_5;
        break;
      }
      
      // required double value_5 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_5_)));
          set_has_value_5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_value_6;
        break;
      }
      
      // required double value_6 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_6_)));
          set_has_value_6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_value_7;
        break;
      }
      
      // required double value_7 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_7_)));
          set_has_value_7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_value_8;
        break;
      }
      
      // required double value_8 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_8_)));
          set_has_value_8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_value_9;
        break;
      }
      
      // required double value_9 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_9_)));
          set_has_value_9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_value_10;
        break;
      }
      
      // required double value_10 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_10_)));
          set_has_value_10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_value_11;
        break;
      }
      
      // required double value_11 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_11:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_11_)));
          set_has_value_11();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_value_12;
        break;
      }
      
      // required double value_12 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_12:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_12_)));
          set_has_value_12();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_value_13;
        break;
      }
      
      // required double value_13 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_13:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_13_)));
          set_has_value_13();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_value_14;
        break;
      }
      
      // required double value_14 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_14:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_14_)));
          set_has_value_14();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_value_15;
        break;
      }
      
      // required double value_15 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_15:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_15_)));
          set_has_value_15();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Matrix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double value_0 = 1;
  if (has_value_0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->value_0(), output);
  }
  
  // required double value_1 = 2;
  if (has_value_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value_1(), output);
  }
  
  // required double value_2 = 3;
  if (has_value_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->value_2(), output);
  }
  
  // required double value_3 = 4;
  if (has_value_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->value_3(), output);
  }
  
  // required double value_4 = 5;
  if (has_value_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->value_4(), output);
  }
  
  // required double value_5 = 6;
  if (has_value_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->value_5(), output);
  }
  
  // required double value_6 = 7;
  if (has_value_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->value_6(), output);
  }
  
  // required double value_7 = 8;
  if (has_value_7()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->value_7(), output);
  }
  
  // required double value_8 = 9;
  if (has_value_8()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->value_8(), output);
  }
  
  // required double value_9 = 10;
  if (has_value_9()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->value_9(), output);
  }
  
  // required double value_10 = 11;
  if (has_value_10()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->value_10(), output);
  }
  
  // required double value_11 = 12;
  if (has_value_11()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->value_11(), output);
  }
  
  // required double value_12 = 13;
  if (has_value_12()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->value_12(), output);
  }
  
  // required double value_13 = 14;
  if (has_value_13()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->value_13(), output);
  }
  
  // required double value_14 = 15;
  if (has_value_14()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->value_14(), output);
  }
  
  // required double value_15 = 16;
  if (has_value_15()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->value_15(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Matrix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double value_0 = 1;
  if (has_value_0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->value_0(), target);
  }
  
  // required double value_1 = 2;
  if (has_value_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value_1(), target);
  }
  
  // required double value_2 = 3;
  if (has_value_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->value_2(), target);
  }
  
  // required double value_3 = 4;
  if (has_value_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->value_3(), target);
  }
  
  // required double value_4 = 5;
  if (has_value_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->value_4(), target);
  }
  
  // required double value_5 = 6;
  if (has_value_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->value_5(), target);
  }
  
  // required double value_6 = 7;
  if (has_value_6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->value_6(), target);
  }
  
  // required double value_7 = 8;
  if (has_value_7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->value_7(), target);
  }
  
  // required double value_8 = 9;
  if (has_value_8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->value_8(), target);
  }
  
  // required double value_9 = 10;
  if (has_value_9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->value_9(), target);
  }
  
  // required double value_10 = 11;
  if (has_value_10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->value_10(), target);
  }
  
  // required double value_11 = 12;
  if (has_value_11()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->value_11(), target);
  }
  
  // required double value_12 = 13;
  if (has_value_12()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->value_12(), target);
  }
  
  // required double value_13 = 14;
  if (has_value_13()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->value_13(), target);
  }
  
  // required double value_14 = 15;
  if (has_value_14()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->value_14(), target);
  }
  
  // required double value_15 = 16;
  if (has_value_15()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->value_15(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Matrix::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double value_0 = 1;
    if (has_value_0()) {
      total_size += 1 + 8;
    }
    
    // required double value_1 = 2;
    if (has_value_1()) {
      total_size += 1 + 8;
    }
    
    // required double value_2 = 3;
    if (has_value_2()) {
      total_size += 1 + 8;
    }
    
    // required double value_3 = 4;
    if (has_value_3()) {
      total_size += 1 + 8;
    }
    
    // required double value_4 = 5;
    if (has_value_4()) {
      total_size += 1 + 8;
    }
    
    // required double value_5 = 6;
    if (has_value_5()) {
      total_size += 1 + 8;
    }
    
    // required double value_6 = 7;
    if (has_value_6()) {
      total_size += 1 + 8;
    }
    
    // required double value_7 = 8;
    if (has_value_7()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double value_8 = 9;
    if (has_value_8()) {
      total_size += 1 + 8;
    }
    
    // required double value_9 = 10;
    if (has_value_9()) {
      total_size += 1 + 8;
    }
    
    // required double value_10 = 11;
    if (has_value_10()) {
      total_size += 1 + 8;
    }
    
    // required double value_11 = 12;
    if (has_value_11()) {
      total_size += 1 + 8;
    }
    
    // required double value_12 = 13;
    if (has_value_12()) {
      total_size += 1 + 8;
    }
    
    // required double value_13 = 14;
    if (has_value_13()) {
      total_size += 1 + 8;
    }
    
    // required double value_14 = 15;
    if (has_value_14()) {
      total_size += 1 + 8;
    }
    
    // required double value_15 = 16;
    if (has_value_15()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matrix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Matrix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Matrix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Matrix::MergeFrom(const Matrix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value_0()) {
      set_value_0(from.value_0());
    }
    if (from.has_value_1()) {
      set_value_1(from.value_1());
    }
    if (from.has_value_2()) {
      set_value_2(from.value_2());
    }
    if (from.has_value_3()) {
      set_value_3(from.value_3());
    }
    if (from.has_value_4()) {
      set_value_4(from.value_4());
    }
    if (from.has_value_5()) {
      set_value_5(from.value_5());
    }
    if (from.has_value_6()) {
      set_value_6(from.value_6());
    }
    if (from.has_value_7()) {
      set_value_7(from.value_7());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_value_8()) {
      set_value_8(from.value_8());
    }
    if (from.has_value_9()) {
      set_value_9(from.value_9());
    }
    if (from.has_value_10()) {
      set_value_10(from.value_10());
    }
    if (from.has_value_11()) {
      set_value_11(from.value_11());
    }
    if (from.has_value_12()) {
      set_value_12(from.value_12());
    }
    if (from.has_value_13()) {
      set_value_13(from.value_13());
    }
    if (from.has_value_14()) {
      set_value_14(from.value_14());
    }
    if (from.has_value_15()) {
      set_value_15(from.value_15());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Matrix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix::CopyFrom(const Matrix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;
  
  return true;
}

void Matrix::Swap(Matrix* other) {
  if (other != this) {
    std::swap(value_0_, other->value_0_);
    std::swap(value_1_, other->value_1_);
    std::swap(value_2_, other->value_2_);
    std::swap(value_3_, other->value_3_);
    std::swap(value_4_, other->value_4_);
    std::swap(value_5_, other->value_5_);
    std::swap(value_6_, other->value_6_);
    std::swap(value_7_, other->value_7_);
    std::swap(value_8_, other->value_8_);
    std::swap(value_9_, other->value_9_);
    std::swap(value_10_, other->value_10_);
    std::swap(value_11_, other->value_11_);
    std::swap(value_12_, other->value_12_);
    std::swap(value_13_, other->value_13_);
    std::swap(value_14_, other->value_14_);
    std::swap(value_15_, other->value_15_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Matrix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Matrix_descriptor_;
  metadata.reflection = Matrix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Property::kTypeFieldNumber;
const int Property::kPropertyNameFieldNumber;
const int Property::kValueArrayFieldNumber;
const int Property::kValueBoolFieldNumber;
const int Property::kValueCharFieldNumber;
const int Property::kValueDoubleFieldNumber;
const int Property::kValueFloatFieldNumber;
const int Property::kPropertyValueFieldNumber;
const int Property::kValueIntFieldNumber;
const int Property::kValueMatrixFieldNumber;
const int Property::kValueQuatFieldNumber;
const int Property::kValueStringFieldNumber;
const int Property::kValueStringidFieldNumber;
const int Property::kValueUintFieldNumber;
const int Property::kValueVec2FieldNumber;
const int Property::kValueVec3FieldNumber;
const int Property::kValueVec4FieldNumber;
const int Property::kValueVec2DFieldNumber;
const int Property::kValueVec3DFieldNumber;
const int Property::kValueVec4DFieldNumber;
#endif  // !_MSC_VER

Property::Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Property::InitAsDefaultInstance() {
  property_value_ = const_cast< ::dtProtoBuf::Property*>(&::dtProtoBuf::Property::default_instance());
  value_matrix_ = const_cast< ::dtProtoBuf::Matrix*>(&::dtProtoBuf::Matrix::default_instance());
  value_quat_ = const_cast< ::dtProtoBuf::Quat*>(&::dtProtoBuf::Quat::default_instance());
  value_vec2_ = const_cast< ::dtProtoBuf::Vec2*>(&::dtProtoBuf::Vec2::default_instance());
  value_vec3_ = const_cast< ::dtProtoBuf::Vec3*>(&::dtProtoBuf::Vec3::default_instance());
  value_vec4_ = const_cast< ::dtProtoBuf::Vec4*>(&::dtProtoBuf::Vec4::default_instance());
  value_vec2d_ = const_cast< ::dtProtoBuf::Vec2d*>(&::dtProtoBuf::Vec2d::default_instance());
  value_vec3d_ = const_cast< ::dtProtoBuf::Vec3d*>(&::dtProtoBuf::Vec3d::default_instance());
  value_vec4d_ = const_cast< ::dtProtoBuf::Vec4d*>(&::dtProtoBuf::Vec4d::default_instance());
}

Property::Property(const Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Property::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  property_name_ = 0u;
  value_bool_ = false;
  value_char_ = 0;
  value_double_ = 0;
  value_float_ = 0;
  property_value_ = NULL;
  value_int_ = 0;
  value_matrix_ = NULL;
  value_quat_ = NULL;
  value_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_stringid_ = 0u;
  value_uint_ = 0u;
  value_vec2_ = NULL;
  value_vec3_ = NULL;
  value_vec4_ = NULL;
  value_vec2d_ = NULL;
  value_vec3d_ = NULL;
  value_vec4d_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Property::~Property() {
  SharedDtor();
}

void Property::SharedDtor() {
  if (value_string_ != &::google::protobuf::internal::kEmptyString) {
    delete value_string_;
  }
  if (this != default_instance_) {
    delete property_value_;
    delete value_matrix_;
    delete value_quat_;
    delete value_vec2_;
    delete value_vec3_;
    delete value_vec4_;
    delete value_vec2d_;
    delete value_vec3d_;
    delete value_vec4d_;
  }
}

void Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}

const Property& Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Property* Property::default_instance_ = NULL;

Property* Property::New() const {
  return new Property;
}

void Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    property_name_ = 0u;
    value_bool_ = false;
    value_char_ = 0;
    value_double_ = 0;
    value_float_ = 0;
    if (has_property_value()) {
      if (property_value_ != NULL) property_value_->::dtProtoBuf::Property::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    value_int_ = 0;
    if (has_value_matrix()) {
      if (value_matrix_ != NULL) value_matrix_->::dtProtoBuf::Matrix::Clear();
    }
    if (has_value_quat()) {
      if (value_quat_ != NULL) value_quat_->::dtProtoBuf::Quat::Clear();
    }
    if (has_value_string()) {
      if (value_string_ != &::google::protobuf::internal::kEmptyString) {
        value_string_->clear();
      }
    }
    value_stringid_ = 0u;
    value_uint_ = 0u;
    if (has_value_vec2()) {
      if (value_vec2_ != NULL) value_vec2_->::dtProtoBuf::Vec2::Clear();
    }
    if (has_value_vec3()) {
      if (value_vec3_ != NULL) value_vec3_->::dtProtoBuf::Vec3::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_value_vec4()) {
      if (value_vec4_ != NULL) value_vec4_->::dtProtoBuf::Vec4::Clear();
    }
    if (has_value_vec2d()) {
      if (value_vec2d_ != NULL) value_vec2d_->::dtProtoBuf::Vec2d::Clear();
    }
    if (has_value_vec3d()) {
      if (value_vec3d_ != NULL) value_vec3d_->::dtProtoBuf::Vec3d::Clear();
    }
    if (has_value_vec4d()) {
      if (value_vec4d_ != NULL) value_vec4d_->::dtProtoBuf::Vec4d::Clear();
    }
  }
  value_array_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dtProtoBuf.PropertyType type = 1 [default = NONE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (dtProtoBuf::PropertyType_IsValid(value)) {
            set_type(static_cast< dtProtoBuf::PropertyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_property_name;
        break;
      }
      
      // required uint32 property_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_property_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &property_name_)));
          set_has_property_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value_array;
        break;
      }
      
      // repeated .dtProtoBuf.Property value_array = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_array:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value_array()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value_array;
        if (input->ExpectTag(32)) goto parse_value_bool;
        break;
      }
      
      // optional bool value_bool = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_bool_)));
          set_has_value_bool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value_char;
        break;
      }
      
      // optional int32 value_char = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_char:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_char_)));
          set_has_value_char();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_value_double;
        break;
      }
      
      // optional double value_double = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_double_)));
          set_has_value_double();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_value_float;
        break;
      }
      
      // optional float value_float = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value_float:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_float_)));
          set_has_value_float();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_property_value;
        break;
      }
      
      // optional .dtProtoBuf.Property property_value = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_property_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_value_int;
        break;
      }
      
      // optional int32 value_int = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_int:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_int_)));
          set_has_value_int();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_value_matrix;
        break;
      }
      
      // optional .dtProtoBuf.Matrix value_matrix = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_matrix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_value_quat;
        break;
      }
      
      // optional .dtProtoBuf.Quat value_quat = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_quat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_quat()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_value_string;
        break;
      }
      
      // optional string value_string = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value_string().data(), this->value_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_value_stringid;
        break;
      }
      
      // optional uint32 value_stringid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_stringid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_stringid_)));
          set_has_value_stringid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_value_uint;
        break;
      }
      
      // optional uint32 value_uint = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_uint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_uint_)));
          set_has_value_uint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_value_vec2;
        break;
      }
      
      // optional .dtProtoBuf.Vec2 value_vec2 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_vec2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_vec2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_value_vec3;
        break;
      }
      
      // optional .dtProtoBuf.Vec3 value_vec3 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_vec3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_vec3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_value_vec4;
        break;
      }
      
      // optional .dtProtoBuf.Vec4 value_vec4 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_vec4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_vec4()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_value_vec2d;
        break;
      }
      
      // optional .dtProtoBuf.Vec2d value_vec2d = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_vec2d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_vec2d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_value_vec3d;
        break;
      }
      
      // optional .dtProtoBuf.Vec3d value_vec3d = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_vec3d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_vec3d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_value_vec4d;
        break;
      }
      
      // optional .dtProtoBuf.Vec4d value_vec4d = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value_vec4d:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value_vec4d()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dtProtoBuf.PropertyType type = 1 [default = NONE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required uint32 property_name = 2;
  if (has_property_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->property_name(), output);
  }
  
  // repeated .dtProtoBuf.Property value_array = 3;
  for (int i = 0; i < this->value_array_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value_array(i), output);
  }
  
  // optional bool value_bool = 4;
  if (has_value_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->value_bool(), output);
  }
  
  // optional int32 value_char = 5;
  if (has_value_char()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value_char(), output);
  }
  
  // optional double value_double = 6;
  if (has_value_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->value_double(), output);
  }
  
  // optional float value_float = 7;
  if (has_value_float()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->value_float(), output);
  }
  
  // optional .dtProtoBuf.Property property_value = 8;
  if (has_property_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->property_value(), output);
  }
  
  // optional int32 value_int = 9;
  if (has_value_int()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->value_int(), output);
  }
  
  // optional .dtProtoBuf.Matrix value_matrix = 10;
  if (has_value_matrix()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->value_matrix(), output);
  }
  
  // optional .dtProtoBuf.Quat value_quat = 11;
  if (has_value_quat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->value_quat(), output);
  }
  
  // optional string value_string = 12;
  if (has_value_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value_string().data(), this->value_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->value_string(), output);
  }
  
  // optional uint32 value_stringid = 13;
  if (has_value_stringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->value_stringid(), output);
  }
  
  // optional uint32 value_uint = 14;
  if (has_value_uint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->value_uint(), output);
  }
  
  // optional .dtProtoBuf.Vec2 value_vec2 = 15;
  if (has_value_vec2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->value_vec2(), output);
  }
  
  // optional .dtProtoBuf.Vec3 value_vec3 = 16;
  if (has_value_vec3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->value_vec3(), output);
  }
  
  // optional .dtProtoBuf.Vec4 value_vec4 = 17;
  if (has_value_vec4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->value_vec4(), output);
  }
  
  // optional .dtProtoBuf.Vec2d value_vec2d = 18;
  if (has_value_vec2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->value_vec2d(), output);
  }
  
  // optional .dtProtoBuf.Vec3d value_vec3d = 19;
  if (has_value_vec3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->value_vec3d(), output);
  }
  
  // optional .dtProtoBuf.Vec4d value_vec4d = 20;
  if (has_value_vec4d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->value_vec4d(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dtProtoBuf.PropertyType type = 1 [default = NONE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required uint32 property_name = 2;
  if (has_property_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->property_name(), target);
  }
  
  // repeated .dtProtoBuf.Property value_array = 3;
  for (int i = 0; i < this->value_array_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value_array(i), target);
  }
  
  // optional bool value_bool = 4;
  if (has_value_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->value_bool(), target);
  }
  
  // optional int32 value_char = 5;
  if (has_value_char()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->value_char(), target);
  }
  
  // optional double value_double = 6;
  if (has_value_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->value_double(), target);
  }
  
  // optional float value_float = 7;
  if (has_value_float()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->value_float(), target);
  }
  
  // optional .dtProtoBuf.Property property_value = 8;
  if (has_property_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->property_value(), target);
  }
  
  // optional int32 value_int = 9;
  if (has_value_int()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->value_int(), target);
  }
  
  // optional .dtProtoBuf.Matrix value_matrix = 10;
  if (has_value_matrix()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->value_matrix(), target);
  }
  
  // optional .dtProtoBuf.Quat value_quat = 11;
  if (has_value_quat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->value_quat(), target);
  }
  
  // optional string value_string = 12;
  if (has_value_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value_string().data(), this->value_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->value_string(), target);
  }
  
  // optional uint32 value_stringid = 13;
  if (has_value_stringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->value_stringid(), target);
  }
  
  // optional uint32 value_uint = 14;
  if (has_value_uint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->value_uint(), target);
  }
  
  // optional .dtProtoBuf.Vec2 value_vec2 = 15;
  if (has_value_vec2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->value_vec2(), target);
  }
  
  // optional .dtProtoBuf.Vec3 value_vec3 = 16;
  if (has_value_vec3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->value_vec3(), target);
  }
  
  // optional .dtProtoBuf.Vec4 value_vec4 = 17;
  if (has_value_vec4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->value_vec4(), target);
  }
  
  // optional .dtProtoBuf.Vec2d value_vec2d = 18;
  if (has_value_vec2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->value_vec2d(), target);
  }
  
  // optional .dtProtoBuf.Vec3d value_vec3d = 19;
  if (has_value_vec3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->value_vec3d(), target);
  }
  
  // optional .dtProtoBuf.Vec4d value_vec4d = 20;
  if (has_value_vec4d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->value_vec4d(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Property::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dtProtoBuf.PropertyType type = 1 [default = NONE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required uint32 property_name = 2;
    if (has_property_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->property_name());
    }
    
    // optional bool value_bool = 4;
    if (has_value_bool()) {
      total_size += 1 + 1;
    }
    
    // optional int32 value_char = 5;
    if (has_value_char()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_char());
    }
    
    // optional double value_double = 6;
    if (has_value_double()) {
      total_size += 1 + 8;
    }
    
    // optional float value_float = 7;
    if (has_value_float()) {
      total_size += 1 + 4;
    }
    
    // optional .dtProtoBuf.Property property_value = 8;
    if (has_property_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->property_value());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 value_int = 9;
    if (has_value_int()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value_int());
    }
    
    // optional .dtProtoBuf.Matrix value_matrix = 10;
    if (has_value_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_matrix());
    }
    
    // optional .dtProtoBuf.Quat value_quat = 11;
    if (has_value_quat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_quat());
    }
    
    // optional string value_string = 12;
    if (has_value_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value_string());
    }
    
    // optional uint32 value_stringid = 13;
    if (has_value_stringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_stringid());
    }
    
    // optional uint32 value_uint = 14;
    if (has_value_uint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_uint());
    }
    
    // optional .dtProtoBuf.Vec2 value_vec2 = 15;
    if (has_value_vec2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_vec2());
    }
    
    // optional .dtProtoBuf.Vec3 value_vec3 = 16;
    if (has_value_vec3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_vec3());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .dtProtoBuf.Vec4 value_vec4 = 17;
    if (has_value_vec4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_vec4());
    }
    
    // optional .dtProtoBuf.Vec2d value_vec2d = 18;
    if (has_value_vec2d()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_vec2d());
    }
    
    // optional .dtProtoBuf.Vec3d value_vec3d = 19;
    if (has_value_vec3d()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_vec3d());
    }
    
    // optional .dtProtoBuf.Vec4d value_vec4d = 20;
    if (has_value_vec4d()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value_vec4d());
    }
    
  }
  // repeated .dtProtoBuf.Property value_array = 3;
  total_size += 1 * this->value_array_size();
  for (int i = 0; i < this->value_array_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value_array(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_array_.MergeFrom(from.value_array_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_property_name()) {
      set_property_name(from.property_name());
    }
    if (from.has_value_bool()) {
      set_value_bool(from.value_bool());
    }
    if (from.has_value_char()) {
      set_value_char(from.value_char());
    }
    if (from.has_value_double()) {
      set_value_double(from.value_double());
    }
    if (from.has_value_float()) {
      set_value_float(from.value_float());
    }
    if (from.has_property_value()) {
      mutable_property_value()->::dtProtoBuf::Property::MergeFrom(from.property_value());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_value_int()) {
      set_value_int(from.value_int());
    }
    if (from.has_value_matrix()) {
      mutable_value_matrix()->::dtProtoBuf::Matrix::MergeFrom(from.value_matrix());
    }
    if (from.has_value_quat()) {
      mutable_value_quat()->::dtProtoBuf::Quat::MergeFrom(from.value_quat());
    }
    if (from.has_value_string()) {
      set_value_string(from.value_string());
    }
    if (from.has_value_stringid()) {
      set_value_stringid(from.value_stringid());
    }
    if (from.has_value_uint()) {
      set_value_uint(from.value_uint());
    }
    if (from.has_value_vec2()) {
      mutable_value_vec2()->::dtProtoBuf::Vec2::MergeFrom(from.value_vec2());
    }
    if (from.has_value_vec3()) {
      mutable_value_vec3()->::dtProtoBuf::Vec3::MergeFrom(from.value_vec3());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_value_vec4()) {
      mutable_value_vec4()->::dtProtoBuf::Vec4::MergeFrom(from.value_vec4());
    }
    if (from.has_value_vec2d()) {
      mutable_value_vec2d()->::dtProtoBuf::Vec2d::MergeFrom(from.value_vec2d());
    }
    if (from.has_value_vec3d()) {
      mutable_value_vec3d()->::dtProtoBuf::Vec3d::MergeFrom(from.value_vec3d());
    }
    if (from.has_value_vec4d()) {
      mutable_value_vec4d()->::dtProtoBuf::Vec4d::MergeFrom(from.value_vec4d());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < value_array_size(); i++) {
    if (!this->value_array(i).IsInitialized()) return false;
  }
  if (has_property_value()) {
    if (!this->property_value().IsInitialized()) return false;
  }
  if (has_value_matrix()) {
    if (!this->value_matrix().IsInitialized()) return false;
  }
  if (has_value_quat()) {
    if (!this->value_quat().IsInitialized()) return false;
  }
  if (has_value_vec2()) {
    if (!this->value_vec2().IsInitialized()) return false;
  }
  if (has_value_vec3()) {
    if (!this->value_vec3().IsInitialized()) return false;
  }
  if (has_value_vec4()) {
    if (!this->value_vec4().IsInitialized()) return false;
  }
  if (has_value_vec2d()) {
    if (!this->value_vec2d().IsInitialized()) return false;
  }
  if (has_value_vec3d()) {
    if (!this->value_vec3d().IsInitialized()) return false;
  }
  if (has_value_vec4d()) {
    if (!this->value_vec4d().IsInitialized()) return false;
  }
  return true;
}

void Property::Swap(Property* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(property_name_, other->property_name_);
    value_array_.Swap(&other->value_array_);
    std::swap(value_bool_, other->value_bool_);
    std::swap(value_char_, other->value_char_);
    std::swap(value_double_, other->value_double_);
    std::swap(value_float_, other->value_float_);
    std::swap(property_value_, other->property_value_);
    std::swap(value_int_, other->value_int_);
    std::swap(value_matrix_, other->value_matrix_);
    std::swap(value_quat_, other->value_quat_);
    std::swap(value_string_, other->value_string_);
    std::swap(value_stringid_, other->value_stringid_);
    std::swap(value_uint_, other->value_uint_);
    std::swap(value_vec2_, other->value_vec2_);
    std::swap(value_vec3_, other->value_vec3_);
    std::swap(value_vec4_, other->value_vec4_);
    std::swap(value_vec2d_, other->value_vec2d_);
    std::swap(value_vec3d_, other->value_vec3d_);
    std::swap(value_vec4d_, other->value_vec4d_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Property_descriptor_;
  metadata.reflection = Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Message::kMessageTypeFieldNumber;
const int Message::kPropertyFieldNumber;
#endif  // !_MSC_VER

Message::Message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Message::InitAsDefaultInstance() {
}

Message::Message(const Message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Message::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Message::~Message() {
  SharedDtor();
}

void Message::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Message_descriptor_;
}

const Message& Message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Message* Message::default_instance_ = NULL;

Message* Message::New() const {
  return new Message;
}

void Message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_type_ = 0u;
  }
  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 message_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_type_)));
          set_has_message_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property;
        break;
      }
      
      // repeated .dtProtoBuf.Property property = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->message_type(), output);
  }
  
  // repeated .dtProtoBuf.Property property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 message_type = 1;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->message_type(), target);
  }
  
  // repeated .dtProtoBuf.Property property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Message::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_type());
    }
    
  }
  // repeated .dtProtoBuf.Property property = 2;
  total_size += 1 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < property_size(); i++) {
    if (!this->property(i).IsInitialized()) return false;
  }
  return true;
}

void Message::Swap(Message* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    property_.Swap(&other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Message_descriptor_;
  metadata.reflection = Message_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Component::kComponentTypeFieldNumber;
const int Component::kPropertyFieldNumber;
#endif  // !_MSC_VER

Component::Component()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Component::InitAsDefaultInstance() {
}

Component::Component(const Component& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Component::SharedCtor() {
  _cached_size_ = 0;
  component_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Component::~Component() {
  SharedDtor();
}

void Component::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Component::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Component_descriptor_;
}

const Component& Component::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Component* Component::default_instance_ = NULL;

Component* Component::New() const {
  return new Component;
}

void Component::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    component_type_ = 0u;
  }
  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 component_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &component_type_)));
          set_has_component_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property;
        break;
      }
      
      // repeated .dtProtoBuf.Property property = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 component_type = 1;
  if (has_component_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->component_type(), output);
  }
  
  // repeated .dtProtoBuf.Property property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Component::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 component_type = 1;
  if (has_component_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->component_type(), target);
  }
  
  // repeated .dtProtoBuf.Property property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Component::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 component_type = 1;
    if (has_component_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->component_type());
    }
    
  }
  // repeated .dtProtoBuf.Property property = 2;
  total_size += 1 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Component::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Component* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Component*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_component_type()) {
      set_component_type(from.component_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Component::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < property_size(); i++) {
    if (!this->property(i).IsInitialized()) return false;
  }
  return true;
}

void Component::Swap(Component* other) {
  if (other != this) {
    std::swap(component_type_, other->component_type_);
    property_.Swap(&other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Component::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Component_descriptor_;
  metadata.reflection = Component_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EntitySystem::kComponentTypeFieldNumber;
const int EntitySystem::kPropertyFieldNumber;
#endif  // !_MSC_VER

EntitySystem::EntitySystem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EntitySystem::InitAsDefaultInstance() {
}

EntitySystem::EntitySystem(const EntitySystem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EntitySystem::SharedCtor() {
  _cached_size_ = 0;
  component_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntitySystem::~EntitySystem() {
  SharedDtor();
}

void EntitySystem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EntitySystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EntitySystem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EntitySystem_descriptor_;
}

const EntitySystem& EntitySystem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

EntitySystem* EntitySystem::default_instance_ = NULL;

EntitySystem* EntitySystem::New() const {
  return new EntitySystem;
}

void EntitySystem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    component_type_ = 0u;
  }
  property_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EntitySystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 component_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &component_type_)));
          set_has_component_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property;
        break;
      }
      
      // repeated .dtProtoBuf.Property property = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_property:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_property()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_property;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntitySystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 component_type = 1;
  if (has_component_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->component_type(), output);
  }
  
  // repeated .dtProtoBuf.Property property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->property(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EntitySystem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 component_type = 1;
  if (has_component_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->component_type(), target);
  }
  
  // repeated .dtProtoBuf.Property property = 2;
  for (int i = 0; i < this->property_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->property(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EntitySystem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 component_type = 1;
    if (has_component_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->component_type());
    }
    
  }
  // repeated .dtProtoBuf.Property property = 2;
  total_size += 1 * this->property_size();
  for (int i = 0; i < this->property_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->property(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntitySystem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EntitySystem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EntitySystem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EntitySystem::MergeFrom(const EntitySystem& from) {
  GOOGLE_CHECK_NE(&from, this);
  property_.MergeFrom(from.property_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_component_type()) {
      set_component_type(from.component_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EntitySystem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EntitySystem::CopyFrom(const EntitySystem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySystem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < property_size(); i++) {
    if (!this->property(i).IsInitialized()) return false;
  }
  return true;
}

void EntitySystem::Swap(EntitySystem* other) {
  if (other != this) {
    std::swap(component_type_, other->component_type_);
    property_.Swap(&other->property_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EntitySystem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EntitySystem_descriptor_;
  metadata.reflection = EntitySystem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Entity::kSpawnerFieldNumber;
const int Entity::kComponentFieldNumber;
#endif  // !_MSC_VER

Entity::Entity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Entity::InitAsDefaultInstance() {
}

Entity::Entity(const Entity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Entity::SharedCtor() {
  _cached_size_ = 0;
  spawner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entity::~Entity() {
  SharedDtor();
}

void Entity::SharedDtor() {
  if (spawner_ != &::google::protobuf::internal::kEmptyString) {
    delete spawner_;
  }
  if (this != default_instance_) {
  }
}

void Entity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entity_descriptor_;
}

const Entity& Entity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Entity* Entity::default_instance_ = NULL;

Entity* Entity::New() const {
  return new Entity;
}

void Entity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_spawner()) {
      if (spawner_ != &::google::protobuf::internal::kEmptyString) {
        spawner_->clear();
      }
    }
  }
  component_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Entity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string spawner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spawner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->spawner().data(), this->spawner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_component;
        break;
      }
      
      // repeated .dtProtoBuf.Component component = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_component()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_component;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Entity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string spawner = 1;
  if (has_spawner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spawner().data(), this->spawner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->spawner(), output);
  }
  
  // repeated .dtProtoBuf.Component component = 2;
  for (int i = 0; i < this->component_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->component(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Entity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string spawner = 1;
  if (has_spawner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->spawner().data(), this->spawner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spawner(), target);
  }
  
  // repeated .dtProtoBuf.Component component = 2;
  for (int i = 0; i < this->component_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->component(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Entity::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string spawner = 1;
    if (has_spawner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->spawner());
    }
    
  }
  // repeated .dtProtoBuf.Component component = 2;
  total_size += 1 * this->component_size();
  for (int i = 0; i < this->component_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->component(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Entity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Entity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entity::MergeFrom(const Entity& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_.MergeFrom(from.component_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spawner()) {
      set_spawner(from.spawner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Entity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entity::CopyFrom(const Entity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entity::IsInitialized() const {
  
  for (int i = 0; i < component_size(); i++) {
    if (!this->component(i).IsInitialized()) return false;
  }
  return true;
}

void Entity::Swap(Entity* other) {
  if (other != this) {
    std::swap(spawner_, other->spawner_);
    component_.Swap(&other->component_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Entity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entity_descriptor_;
  metadata.reflection = Entity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Spawner::kComponentFieldNumber;
const int Spawner::kNameFieldNumber;
const int Spawner::kParentFieldNumber;
const int Spawner::kAddToSpawnerStoreFieldNumber;
const int Spawner::kGuiCategoryFieldNumber;
const int Spawner::kIconPathFieldNumber;
#endif  // !_MSC_VER

Spawner::Spawner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Spawner::InitAsDefaultInstance() {
}

Spawner::Spawner(const Spawner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Spawner::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addtospawnerstore_ = false;
  guicategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iconpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Spawner::~Spawner() {
  SharedDtor();
}

void Spawner::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (parent_ != &::google::protobuf::internal::kEmptyString) {
    delete parent_;
  }
  if (guicategory_ != &::google::protobuf::internal::kEmptyString) {
    delete guicategory_;
  }
  if (iconpath_ != &::google::protobuf::internal::kEmptyString) {
    delete iconpath_;
  }
  if (this != default_instance_) {
  }
}

void Spawner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Spawner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Spawner_descriptor_;
}

const Spawner& Spawner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Spawner* Spawner::default_instance_ = NULL;

Spawner* Spawner::New() const {
  return new Spawner;
}

void Spawner::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_parent()) {
      if (parent_ != &::google::protobuf::internal::kEmptyString) {
        parent_->clear();
      }
    }
    addtospawnerstore_ = false;
    if (has_guicategory()) {
      if (guicategory_ != &::google::protobuf::internal::kEmptyString) {
        guicategory_->clear();
      }
    }
    if (has_iconpath()) {
      if (iconpath_ != &::google::protobuf::internal::kEmptyString) {
        iconpath_->clear();
      }
    }
  }
  component_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Spawner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dtProtoBuf.Component component = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_component:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_component()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_component;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parent;
        break;
      }
      
      // optional string parent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parent().data(), this->parent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addToSpawnerStore;
        break;
      }
      
      // optional bool addToSpawnerStore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addToSpawnerStore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &addtospawnerstore_)));
          set_has_addtospawnerstore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_guiCategory;
        break;
      }
      
      // optional string guiCategory = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guiCategory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guicategory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guicategory().data(), this->guicategory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_iconPath;
        break;
      }
      
      // optional string iconPath = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_iconPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iconpath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->iconpath().data(), this->iconpath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Spawner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dtProtoBuf.Component component = 1;
  for (int i = 0; i < this->component_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->component(i), output);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string parent = 3;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->parent(), output);
  }
  
  // optional bool addToSpawnerStore = 4;
  if (has_addtospawnerstore()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->addtospawnerstore(), output);
  }
  
  // optional string guiCategory = 5;
  if (has_guicategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guicategory().data(), this->guicategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->guicategory(), output);
  }
  
  // optional string iconPath = 6;
  if (has_iconpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconpath().data(), this->iconpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->iconpath(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Spawner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dtProtoBuf.Component component = 1;
  for (int i = 0; i < this->component_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->component(i), target);
  }
  
  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string parent = 3;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parent().data(), this->parent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parent(), target);
  }
  
  // optional bool addToSpawnerStore = 4;
  if (has_addtospawnerstore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->addtospawnerstore(), target);
  }
  
  // optional string guiCategory = 5;
  if (has_guicategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guicategory().data(), this->guicategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guicategory(), target);
  }
  
  // optional string iconPath = 6;
  if (has_iconpath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->iconpath().data(), this->iconpath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->iconpath(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Spawner::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string parent = 3;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parent());
    }
    
    // optional bool addToSpawnerStore = 4;
    if (has_addtospawnerstore()) {
      total_size += 1 + 1;
    }
    
    // optional string guiCategory = 5;
    if (has_guicategory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guicategory());
    }
    
    // optional string iconPath = 6;
    if (has_iconpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->iconpath());
    }
    
  }
  // repeated .dtProtoBuf.Component component = 1;
  total_size += 1 * this->component_size();
  for (int i = 0; i < this->component_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->component(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Spawner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Spawner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Spawner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Spawner::MergeFrom(const Spawner& from) {
  GOOGLE_CHECK_NE(&from, this);
  component_.MergeFrom(from.component_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_addtospawnerstore()) {
      set_addtospawnerstore(from.addtospawnerstore());
    }
    if (from.has_guicategory()) {
      set_guicategory(from.guicategory());
    }
    if (from.has_iconpath()) {
      set_iconpath(from.iconpath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Spawner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spawner::CopyFrom(const Spawner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spawner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < component_size(); i++) {
    if (!this->component(i).IsInitialized()) return false;
  }
  return true;
}

void Spawner::Swap(Spawner* other) {
  if (other != this) {
    component_.Swap(&other->component_);
    std::swap(name_, other->name_);
    std::swap(parent_, other->parent_);
    std::swap(addtospawnerstore_, other->addtospawnerstore_);
    std::swap(guicategory_, other->guicategory_);
    std::swap(iconpath_, other->iconpath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Spawner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Spawner_descriptor_;
  metadata.reflection = Spawner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Map::kSpawnerFieldNumber;
const int Map::kEntityFieldNumber;
#endif  // !_MSC_VER

Map::Map()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Map::InitAsDefaultInstance() {
}

Map::Map(const Map& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Map::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Map::~Map() {
  SharedDtor();
}

void Map::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Map::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Map::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Map_descriptor_;
}

const Map& Map::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Map* Map::default_instance_ = NULL;

Map* Map::New() const {
  return new Map;
}

void Map::Clear() {
  spawner_.Clear();
  entity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Map::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dtProtoBuf.Spawner spawner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spawner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spawner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_spawner;
        if (input->ExpectTag(18)) goto parse_entity;
        break;
      }
      
      // repeated .dtProtoBuf.Entity entity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entity;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Map::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .dtProtoBuf.Spawner spawner = 1;
  for (int i = 0; i < this->spawner_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->spawner(i), output);
  }
  
  // repeated .dtProtoBuf.Entity entity = 2;
  for (int i = 0; i < this->entity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entity(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Map::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .dtProtoBuf.Spawner spawner = 1;
  for (int i = 0; i < this->spawner_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->spawner(i), target);
  }
  
  // repeated .dtProtoBuf.Entity entity = 2;
  for (int i = 0; i < this->entity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entity(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Map::ByteSize() const {
  int total_size = 0;
  
  // repeated .dtProtoBuf.Spawner spawner = 1;
  total_size += 1 * this->spawner_size();
  for (int i = 0; i < this->spawner_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spawner(i));
  }
  
  // repeated .dtProtoBuf.Entity entity = 2;
  total_size += 1 * this->entity_size();
  for (int i = 0; i < this->entity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entity(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Map::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Map* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Map*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Map::MergeFrom(const Map& from) {
  GOOGLE_CHECK_NE(&from, this);
  spawner_.MergeFrom(from.spawner_);
  entity_.MergeFrom(from.entity_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Map::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Map::CopyFrom(const Map& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  
  for (int i = 0; i < spawner_size(); i++) {
    if (!this->spawner(i).IsInitialized()) return false;
  }
  for (int i = 0; i < entity_size(); i++) {
    if (!this->entity(i).IsInitialized()) return false;
  }
  return true;
}

void Map::Swap(Map* other) {
  if (other != this) {
    spawner_.Swap(&other->spawner_);
    entity_.Swap(&other->entity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Map::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Map_descriptor_;
  metadata.reflection = Map_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Scene::kLibrariesFieldNumber;
const int Scene::kEntitysystemFieldNumber;
const int Scene::kMapFieldNumber;
#endif  // !_MSC_VER

Scene::Scene()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Scene::InitAsDefaultInstance() {
}

Scene::Scene(const Scene& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Scene::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scene::~Scene() {
  SharedDtor();
}

void Scene::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scene_descriptor_;
}

const Scene& Scene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2eproto();  return *default_instance_;
}

Scene* Scene::default_instance_ = NULL;

Scene* Scene::New() const {
  return new Scene;
}

void Scene::Clear() {
  libraries_.Clear();
  entitysystem_.Clear();
  map_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string libraries = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_libraries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_libraries()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->libraries(0).data(), this->libraries(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_libraries;
        if (input->ExpectTag(18)) goto parse_entitysystem;
        break;
      }
      
      // repeated .dtProtoBuf.EntitySystem entitysystem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entitysystem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entitysystem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entitysystem;
        if (input->ExpectTag(26)) goto parse_map;
        break;
      }
      
      // repeated string map = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_map()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map(0).data(), this->map(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_map;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string libraries = 1;
  for (int i = 0; i < this->libraries_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->libraries(i).data(), this->libraries(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->libraries(i), output);
  }
  
  // repeated .dtProtoBuf.EntitySystem entitysystem = 2;
  for (int i = 0; i < this->entitysystem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entitysystem(i), output);
  }
  
  // repeated string map = 3;
  for (int i = 0; i < this->map_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->map(i).data(), this->map(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->map(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Scene::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string libraries = 1;
  for (int i = 0; i < this->libraries_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->libraries(i).data(), this->libraries(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->libraries(i), target);
  }
  
  // repeated .dtProtoBuf.EntitySystem entitysystem = 2;
  for (int i = 0; i < this->entitysystem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entitysystem(i), target);
  }
  
  // repeated string map = 3;
  for (int i = 0; i < this->map_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map(i).data(), this->map(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->map(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Scene::ByteSize() const {
  int total_size = 0;
  
  // repeated string libraries = 1;
  total_size += 1 * this->libraries_size();
  for (int i = 0; i < this->libraries_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->libraries(i));
  }
  
  // repeated .dtProtoBuf.EntitySystem entitysystem = 2;
  total_size += 1 * this->entitysystem_size();
  for (int i = 0; i < this->entitysystem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entitysystem(i));
  }
  
  // repeated string map = 3;
  total_size += 1 * this->map_size();
  for (int i = 0; i < this->map_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->map(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scene::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scene* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scene*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
  GOOGLE_CHECK_NE(&from, this);
  libraries_.MergeFrom(from.libraries_);
  entitysystem_.MergeFrom(from.entitysystem_);
  map_.MergeFrom(from.map_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scene::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  
  for (int i = 0; i < entitysystem_size(); i++) {
    if (!this->entitysystem(i).IsInitialized()) return false;
  }
  return true;
}

void Scene::Swap(Scene* other) {
  if (other != this) {
    libraries_.Swap(&other->libraries_);
    entitysystem_.Swap(&other->entitysystem_);
    map_.Swap(&other->map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scene_descriptor_;
  metadata.reflection = Scene_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dtProtoBuf

// @@protoc_insertion_point(global_scope)
